/* automatically generated by rust-bindgen 0.59.2 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
pub type wchar_t = ::std::os::raw::c_int;
pub type cmsUInt8Number = ::std::os::raw::c_uchar;
pub type cmsInt8Number = ::std::os::raw::c_schar;
pub type cmsFloat32Number = f32;
pub type cmsFloat64Number = f64;
pub type cmsUInt16Number = ::std::os::raw::c_ushort;
pub type cmsInt16Number = ::std::os::raw::c_short;
pub type cmsUInt32Number = ::std::os::raw::c_uint;
pub type cmsInt32Number = ::std::os::raw::c_int;
pub type cmsUInt64Number = ::std::os::raw::c_ulong;
pub type cmsInt64Number = ::std::os::raw::c_long;
pub type cmsSignature = cmsUInt32Number;
pub type cmsU8Fixed8Number = cmsUInt16Number;
pub type cmsS15Fixed16Number = cmsInt32Number;
pub type cmsU16Fixed16Number = cmsUInt32Number;
pub type cmsBool = ::std::os::raw::c_int;
pub const cmsTagTypeSignature_cmsSigChromaticityType: cmsTagTypeSignature = 1667789421;
pub const cmsTagTypeSignature_cmsSigColorantOrderType: cmsTagTypeSignature = 1668051567;
pub const cmsTagTypeSignature_cmsSigColorantTableType: cmsTagTypeSignature = 1668051572;
pub const cmsTagTypeSignature_cmsSigCrdInfoType: cmsTagTypeSignature = 1668441193;
pub const cmsTagTypeSignature_cmsSigCurveType: cmsTagTypeSignature = 1668641398;
pub const cmsTagTypeSignature_cmsSigDataType: cmsTagTypeSignature = 1684108385;
pub const cmsTagTypeSignature_cmsSigDictType: cmsTagTypeSignature = 1684628340;
pub const cmsTagTypeSignature_cmsSigDateTimeType: cmsTagTypeSignature = 1685350765;
pub const cmsTagTypeSignature_cmsSigDeviceSettingsType: cmsTagTypeSignature = 1684371059;
pub const cmsTagTypeSignature_cmsSigLut16Type: cmsTagTypeSignature = 1835430962;
pub const cmsTagTypeSignature_cmsSigLut8Type: cmsTagTypeSignature = 1835430961;
pub const cmsTagTypeSignature_cmsSigLutAtoBType: cmsTagTypeSignature = 1832993312;
pub const cmsTagTypeSignature_cmsSigLutBtoAType: cmsTagTypeSignature = 1833058592;
pub const cmsTagTypeSignature_cmsSigMeasurementType: cmsTagTypeSignature = 1835360627;
pub const cmsTagTypeSignature_cmsSigMultiLocalizedUnicodeType: cmsTagTypeSignature = 1835824483;
pub const cmsTagTypeSignature_cmsSigMultiProcessElementType: cmsTagTypeSignature = 1836082548;
pub const cmsTagTypeSignature_cmsSigNamedColorType: cmsTagTypeSignature = 1852010348;
pub const cmsTagTypeSignature_cmsSigNamedColor2Type: cmsTagTypeSignature = 1852009522;
pub const cmsTagTypeSignature_cmsSigParametricCurveType: cmsTagTypeSignature = 1885434465;
pub const cmsTagTypeSignature_cmsSigProfileSequenceDescType: cmsTagTypeSignature = 1886610801;
pub const cmsTagTypeSignature_cmsSigProfileSequenceIdType: cmsTagTypeSignature = 1886611812;
pub const cmsTagTypeSignature_cmsSigResponseCurveSet16Type: cmsTagTypeSignature = 1919120178;
pub const cmsTagTypeSignature_cmsSigS15Fixed16ArrayType: cmsTagTypeSignature = 1936077618;
pub const cmsTagTypeSignature_cmsSigScreeningType: cmsTagTypeSignature = 1935897198;
pub const cmsTagTypeSignature_cmsSigSignatureType: cmsTagTypeSignature = 1936287520;
pub const cmsTagTypeSignature_cmsSigTextType: cmsTagTypeSignature = 1952807028;
pub const cmsTagTypeSignature_cmsSigTextDescriptionType: cmsTagTypeSignature = 1684370275;
pub const cmsTagTypeSignature_cmsSigU16Fixed16ArrayType: cmsTagTypeSignature = 1969632050;
pub const cmsTagTypeSignature_cmsSigUcrBgType: cmsTagTypeSignature = 1650877472;
pub const cmsTagTypeSignature_cmsSigUInt16ArrayType: cmsTagTypeSignature = 1969828150;
pub const cmsTagTypeSignature_cmsSigUInt32ArrayType: cmsTagTypeSignature = 1969828658;
pub const cmsTagTypeSignature_cmsSigUInt64ArrayType: cmsTagTypeSignature = 1969829428;
pub const cmsTagTypeSignature_cmsSigUInt8ArrayType: cmsTagTypeSignature = 1969827896;
pub const cmsTagTypeSignature_cmsSigVcgtType: cmsTagTypeSignature = 1986226036;
pub const cmsTagTypeSignature_cmsSigViewingConditionsType: cmsTagTypeSignature = 1986618743;
pub const cmsTagTypeSignature_cmsSigXYZType: cmsTagTypeSignature = 1482250784;
pub type cmsTagTypeSignature = ::std::os::raw::c_uint;
pub const cmsTagSignature_cmsSigAToB0Tag: cmsTagSignature = 1093812784;
pub const cmsTagSignature_cmsSigAToB1Tag: cmsTagSignature = 1093812785;
pub const cmsTagSignature_cmsSigAToB2Tag: cmsTagSignature = 1093812786;
pub const cmsTagSignature_cmsSigBlueColorantTag: cmsTagSignature = 1649957210;
pub const cmsTagSignature_cmsSigBlueMatrixColumnTag: cmsTagSignature = 1649957210;
pub const cmsTagSignature_cmsSigBlueTRCTag: cmsTagSignature = 1649693251;
pub const cmsTagSignature_cmsSigBToA0Tag: cmsTagSignature = 1110589744;
pub const cmsTagSignature_cmsSigBToA1Tag: cmsTagSignature = 1110589745;
pub const cmsTagSignature_cmsSigBToA2Tag: cmsTagSignature = 1110589746;
pub const cmsTagSignature_cmsSigCalibrationDateTimeTag: cmsTagSignature = 1667329140;
pub const cmsTagSignature_cmsSigCharTargetTag: cmsTagSignature = 1952543335;
pub const cmsTagSignature_cmsSigChromaticAdaptationTag: cmsTagSignature = 1667785060;
pub const cmsTagSignature_cmsSigChromaticityTag: cmsTagSignature = 1667789421;
pub const cmsTagSignature_cmsSigColorantOrderTag: cmsTagSignature = 1668051567;
pub const cmsTagSignature_cmsSigColorantTableTag: cmsTagSignature = 1668051572;
pub const cmsTagSignature_cmsSigColorantTableOutTag: cmsTagSignature = 1668050804;
pub const cmsTagSignature_cmsSigColorimetricIntentImageStateTag: cmsTagSignature = 1667852659;
pub const cmsTagSignature_cmsSigCopyrightTag: cmsTagSignature = 1668313716;
pub const cmsTagSignature_cmsSigCrdInfoTag: cmsTagSignature = 1668441193;
pub const cmsTagSignature_cmsSigDataTag: cmsTagSignature = 1684108385;
pub const cmsTagSignature_cmsSigDateTimeTag: cmsTagSignature = 1685350765;
pub const cmsTagSignature_cmsSigDeviceMfgDescTag: cmsTagSignature = 1684893284;
pub const cmsTagSignature_cmsSigDeviceModelDescTag: cmsTagSignature = 1684890724;
pub const cmsTagSignature_cmsSigDeviceSettingsTag: cmsTagSignature = 1684371059;
pub const cmsTagSignature_cmsSigDToB0Tag: cmsTagSignature = 1144144432;
pub const cmsTagSignature_cmsSigDToB1Tag: cmsTagSignature = 1144144433;
pub const cmsTagSignature_cmsSigDToB2Tag: cmsTagSignature = 1144144434;
pub const cmsTagSignature_cmsSigDToB3Tag: cmsTagSignature = 1144144435;
pub const cmsTagSignature_cmsSigBToD0Tag: cmsTagSignature = 1110590512;
pub const cmsTagSignature_cmsSigBToD1Tag: cmsTagSignature = 1110590513;
pub const cmsTagSignature_cmsSigBToD2Tag: cmsTagSignature = 1110590514;
pub const cmsTagSignature_cmsSigBToD3Tag: cmsTagSignature = 1110590515;
pub const cmsTagSignature_cmsSigGamutTag: cmsTagSignature = 1734438260;
pub const cmsTagSignature_cmsSigGrayTRCTag: cmsTagSignature = 1800688195;
pub const cmsTagSignature_cmsSigGreenColorantTag: cmsTagSignature = 1733843290;
pub const cmsTagSignature_cmsSigGreenMatrixColumnTag: cmsTagSignature = 1733843290;
pub const cmsTagSignature_cmsSigGreenTRCTag: cmsTagSignature = 1733579331;
pub const cmsTagSignature_cmsSigLuminanceTag: cmsTagSignature = 1819635049;
pub const cmsTagSignature_cmsSigMeasurementTag: cmsTagSignature = 1835360627;
pub const cmsTagSignature_cmsSigMediaBlackPointTag: cmsTagSignature = 1651208308;
pub const cmsTagSignature_cmsSigMediaWhitePointTag: cmsTagSignature = 2004119668;
pub const cmsTagSignature_cmsSigNamedColorTag: cmsTagSignature = 1852010348;
pub const cmsTagSignature_cmsSigNamedColor2Tag: cmsTagSignature = 1852009522;
pub const cmsTagSignature_cmsSigOutputResponseTag: cmsTagSignature = 1919251312;
pub const cmsTagSignature_cmsSigPerceptualRenderingIntentGamutTag: cmsTagSignature = 1919510320;
pub const cmsTagSignature_cmsSigPreview0Tag: cmsTagSignature = 1886545200;
pub const cmsTagSignature_cmsSigPreview1Tag: cmsTagSignature = 1886545201;
pub const cmsTagSignature_cmsSigPreview2Tag: cmsTagSignature = 1886545202;
pub const cmsTagSignature_cmsSigProfileDescriptionTag: cmsTagSignature = 1684370275;
pub const cmsTagSignature_cmsSigProfileDescriptionMLTag: cmsTagSignature = 1685283693;
pub const cmsTagSignature_cmsSigProfileSequenceDescTag: cmsTagSignature = 1886610801;
pub const cmsTagSignature_cmsSigProfileSequenceIdTag: cmsTagSignature = 1886611812;
pub const cmsTagSignature_cmsSigPs2CRD0Tag: cmsTagSignature = 1886610480;
pub const cmsTagSignature_cmsSigPs2CRD1Tag: cmsTagSignature = 1886610481;
pub const cmsTagSignature_cmsSigPs2CRD2Tag: cmsTagSignature = 1886610482;
pub const cmsTagSignature_cmsSigPs2CRD3Tag: cmsTagSignature = 1886610483;
pub const cmsTagSignature_cmsSigPs2CSATag: cmsTagSignature = 1886597747;
pub const cmsTagSignature_cmsSigPs2RenderingIntentTag: cmsTagSignature = 1886597737;
pub const cmsTagSignature_cmsSigRedColorantTag: cmsTagSignature = 1918392666;
pub const cmsTagSignature_cmsSigRedMatrixColumnTag: cmsTagSignature = 1918392666;
pub const cmsTagSignature_cmsSigRedTRCTag: cmsTagSignature = 1918128707;
pub const cmsTagSignature_cmsSigSaturationRenderingIntentGamutTag: cmsTagSignature = 1919510322;
pub const cmsTagSignature_cmsSigScreeningDescTag: cmsTagSignature = 1935897188;
pub const cmsTagSignature_cmsSigScreeningTag: cmsTagSignature = 1935897198;
pub const cmsTagSignature_cmsSigTechnologyTag: cmsTagSignature = 1952801640;
pub const cmsTagSignature_cmsSigUcrBgTag: cmsTagSignature = 1650877472;
pub const cmsTagSignature_cmsSigViewingCondDescTag: cmsTagSignature = 1987405156;
pub const cmsTagSignature_cmsSigViewingConditionsTag: cmsTagSignature = 1986618743;
pub const cmsTagSignature_cmsSigVcgtTag: cmsTagSignature = 1986226036;
pub const cmsTagSignature_cmsSigMetaTag: cmsTagSignature = 1835365473;
pub const cmsTagSignature_cmsSigArgyllArtsTag: cmsTagSignature = 1634890867;
pub type cmsTagSignature = ::std::os::raw::c_uint;
pub const cmsTechnologySignature_cmsSigDigitalCamera: cmsTechnologySignature = 1684234605;
pub const cmsTechnologySignature_cmsSigFilmScanner: cmsTechnologySignature = 1718838126;
pub const cmsTechnologySignature_cmsSigReflectiveScanner: cmsTechnologySignature = 1920164718;
pub const cmsTechnologySignature_cmsSigInkJetPrinter: cmsTechnologySignature = 1768580468;
pub const cmsTechnologySignature_cmsSigThermalWaxPrinter: cmsTechnologySignature = 1953980792;
pub const cmsTechnologySignature_cmsSigElectrophotographicPrinter: cmsTechnologySignature =
    1701865583;
pub const cmsTechnologySignature_cmsSigElectrostaticPrinter: cmsTechnologySignature = 1702065249;
pub const cmsTechnologySignature_cmsSigDyeSublimationPrinter: cmsTechnologySignature = 1685288290;
pub const cmsTechnologySignature_cmsSigPhotographicPaperPrinter: cmsTechnologySignature =
    1919969391;
pub const cmsTechnologySignature_cmsSigFilmWriter: cmsTechnologySignature = 1718645358;
pub const cmsTechnologySignature_cmsSigVideoMonitor: cmsTechnologySignature = 1986618477;
pub const cmsTechnologySignature_cmsSigVideoCamera: cmsTechnologySignature = 1986618467;
pub const cmsTechnologySignature_cmsSigProjectionTelevision: cmsTechnologySignature = 1886024822;
pub const cmsTechnologySignature_cmsSigCRTDisplay: cmsTechnologySignature = 1129468960;
pub const cmsTechnologySignature_cmsSigPMDisplay: cmsTechnologySignature = 1347240992;
pub const cmsTechnologySignature_cmsSigAMDisplay: cmsTechnologySignature = 1095582752;
pub const cmsTechnologySignature_cmsSigPhotoCD: cmsTechnologySignature = 1263551300;
pub const cmsTechnologySignature_cmsSigPhotoImageSetter: cmsTechnologySignature = 1768777587;
pub const cmsTechnologySignature_cmsSigGravure: cmsTechnologySignature = 1735549302;
pub const cmsTechnologySignature_cmsSigOffsetLithography: cmsTechnologySignature = 1868981875;
pub const cmsTechnologySignature_cmsSigSilkscreen: cmsTechnologySignature = 1936288875;
pub const cmsTechnologySignature_cmsSigFlexography: cmsTechnologySignature = 1718379896;
pub const cmsTechnologySignature_cmsSigMotionPictureFilmScanner: cmsTechnologySignature =
    1836082803;
pub const cmsTechnologySignature_cmsSigMotionPictureFilmRecorder: cmsTechnologySignature =
    1836082802;
pub const cmsTechnologySignature_cmsSigDigitalMotionPictureCamera: cmsTechnologySignature =
    1684893795;
pub const cmsTechnologySignature_cmsSigDigitalCinemaProjector: cmsTechnologySignature = 1684236912;
pub type cmsTechnologySignature = ::std::os::raw::c_uint;
pub const cmsColorSpaceSignature_cmsSigXYZData: cmsColorSpaceSignature = 1482250784;
pub const cmsColorSpaceSignature_cmsSigLabData: cmsColorSpaceSignature = 1281450528;
pub const cmsColorSpaceSignature_cmsSigLuvData: cmsColorSpaceSignature = 1282766368;
pub const cmsColorSpaceSignature_cmsSigYCbCrData: cmsColorSpaceSignature = 1497588338;
pub const cmsColorSpaceSignature_cmsSigYxyData: cmsColorSpaceSignature = 1501067552;
pub const cmsColorSpaceSignature_cmsSigRgbData: cmsColorSpaceSignature = 1380401696;
pub const cmsColorSpaceSignature_cmsSigGrayData: cmsColorSpaceSignature = 1196573017;
pub const cmsColorSpaceSignature_cmsSigHsvData: cmsColorSpaceSignature = 1213421088;
pub const cmsColorSpaceSignature_cmsSigHlsData: cmsColorSpaceSignature = 1212961568;
pub const cmsColorSpaceSignature_cmsSigCmykData: cmsColorSpaceSignature = 1129142603;
pub const cmsColorSpaceSignature_cmsSigCmyData: cmsColorSpaceSignature = 1129142560;
pub const cmsColorSpaceSignature_cmsSigMCH1Data: cmsColorSpaceSignature = 1296255025;
pub const cmsColorSpaceSignature_cmsSigMCH2Data: cmsColorSpaceSignature = 1296255026;
pub const cmsColorSpaceSignature_cmsSigMCH3Data: cmsColorSpaceSignature = 1296255027;
pub const cmsColorSpaceSignature_cmsSigMCH4Data: cmsColorSpaceSignature = 1296255028;
pub const cmsColorSpaceSignature_cmsSigMCH5Data: cmsColorSpaceSignature = 1296255029;
pub const cmsColorSpaceSignature_cmsSigMCH6Data: cmsColorSpaceSignature = 1296255030;
pub const cmsColorSpaceSignature_cmsSigMCH7Data: cmsColorSpaceSignature = 1296255031;
pub const cmsColorSpaceSignature_cmsSigMCH8Data: cmsColorSpaceSignature = 1296255032;
pub const cmsColorSpaceSignature_cmsSigMCH9Data: cmsColorSpaceSignature = 1296255033;
pub const cmsColorSpaceSignature_cmsSigMCHAData: cmsColorSpaceSignature = 1296255041;
pub const cmsColorSpaceSignature_cmsSigMCHBData: cmsColorSpaceSignature = 1296255042;
pub const cmsColorSpaceSignature_cmsSigMCHCData: cmsColorSpaceSignature = 1296255043;
pub const cmsColorSpaceSignature_cmsSigMCHDData: cmsColorSpaceSignature = 1296255044;
pub const cmsColorSpaceSignature_cmsSigMCHEData: cmsColorSpaceSignature = 1296255045;
pub const cmsColorSpaceSignature_cmsSigMCHFData: cmsColorSpaceSignature = 1296255046;
pub const cmsColorSpaceSignature_cmsSigNamedData: cmsColorSpaceSignature = 1852662636;
pub const cmsColorSpaceSignature_cmsSig1colorData: cmsColorSpaceSignature = 826494034;
pub const cmsColorSpaceSignature_cmsSig2colorData: cmsColorSpaceSignature = 843271250;
pub const cmsColorSpaceSignature_cmsSig3colorData: cmsColorSpaceSignature = 860048466;
pub const cmsColorSpaceSignature_cmsSig4colorData: cmsColorSpaceSignature = 876825682;
pub const cmsColorSpaceSignature_cmsSig5colorData: cmsColorSpaceSignature = 893602898;
pub const cmsColorSpaceSignature_cmsSig6colorData: cmsColorSpaceSignature = 910380114;
pub const cmsColorSpaceSignature_cmsSig7colorData: cmsColorSpaceSignature = 927157330;
pub const cmsColorSpaceSignature_cmsSig8colorData: cmsColorSpaceSignature = 943934546;
pub const cmsColorSpaceSignature_cmsSig9colorData: cmsColorSpaceSignature = 960711762;
pub const cmsColorSpaceSignature_cmsSig10colorData: cmsColorSpaceSignature = 1094929490;
pub const cmsColorSpaceSignature_cmsSig11colorData: cmsColorSpaceSignature = 1111706706;
pub const cmsColorSpaceSignature_cmsSig12colorData: cmsColorSpaceSignature = 1128483922;
pub const cmsColorSpaceSignature_cmsSig13colorData: cmsColorSpaceSignature = 1145261138;
pub const cmsColorSpaceSignature_cmsSig14colorData: cmsColorSpaceSignature = 1162038354;
pub const cmsColorSpaceSignature_cmsSig15colorData: cmsColorSpaceSignature = 1178815570;
pub const cmsColorSpaceSignature_cmsSigLuvKData: cmsColorSpaceSignature = 1282766411;
pub type cmsColorSpaceSignature = ::std::os::raw::c_uint;
pub const cmsProfileClassSignature_cmsSigInputClass: cmsProfileClassSignature = 1935896178;
pub const cmsProfileClassSignature_cmsSigDisplayClass: cmsProfileClassSignature = 1835955314;
pub const cmsProfileClassSignature_cmsSigOutputClass: cmsProfileClassSignature = 1886549106;
pub const cmsProfileClassSignature_cmsSigLinkClass: cmsProfileClassSignature = 1818848875;
pub const cmsProfileClassSignature_cmsSigAbstractClass: cmsProfileClassSignature = 1633842036;
pub const cmsProfileClassSignature_cmsSigColorSpaceClass: cmsProfileClassSignature = 1936744803;
pub const cmsProfileClassSignature_cmsSigNamedColorClass: cmsProfileClassSignature = 1852662636;
pub type cmsProfileClassSignature = ::std::os::raw::c_uint;
pub const cmsPlatformSignature_cmsSigMacintosh: cmsPlatformSignature = 1095782476;
pub const cmsPlatformSignature_cmsSigMicrosoft: cmsPlatformSignature = 1297303124;
pub const cmsPlatformSignature_cmsSigSolaris: cmsPlatformSignature = 1398099543;
pub const cmsPlatformSignature_cmsSigSGI: cmsPlatformSignature = 1397180704;
pub const cmsPlatformSignature_cmsSigTaligent: cmsPlatformSignature = 1413959252;
pub const cmsPlatformSignature_cmsSigUnices: cmsPlatformSignature = 711879032;
pub type cmsPlatformSignature = ::std::os::raw::c_uint;
pub const cmsStageSignature_cmsSigCurveSetElemType: cmsStageSignature = 1668707188;
pub const cmsStageSignature_cmsSigMatrixElemType: cmsStageSignature = 1835103334;
pub const cmsStageSignature_cmsSigCLutElemType: cmsStageSignature = 1668052340;
pub const cmsStageSignature_cmsSigBAcsElemType: cmsStageSignature = 1648444243;
pub const cmsStageSignature_cmsSigEAcsElemType: cmsStageSignature = 1698775891;
pub const cmsStageSignature_cmsSigXYZ2LabElemType: cmsStageSignature = 1815246880;
pub const cmsStageSignature_cmsSigLab2XYZElemType: cmsStageSignature = 2016570400;
pub const cmsStageSignature_cmsSigNamedColorElemType: cmsStageSignature = 1852009504;
pub const cmsStageSignature_cmsSigLabV2toV4: cmsStageSignature = 840971296;
pub const cmsStageSignature_cmsSigLabV4toV2: cmsStageSignature = 874525216;
pub const cmsStageSignature_cmsSigIdentityElemType: cmsStageSignature = 1768189472;
pub const cmsStageSignature_cmsSigLab2FloatPCS: cmsStageSignature = 1681026080;
pub const cmsStageSignature_cmsSigFloatPCS2Lab: cmsStageSignature = 1815241760;
pub const cmsStageSignature_cmsSigXYZ2FloatPCS: cmsStageSignature = 1681029152;
pub const cmsStageSignature_cmsSigFloatPCS2XYZ: cmsStageSignature = 2016568352;
pub const cmsStageSignature_cmsSigClipNegativesElemType: cmsStageSignature = 1668050976;
pub type cmsStageSignature = ::std::os::raw::c_uint;
pub const cmsCurveSegSignature_cmsSigFormulaCurveSeg: cmsCurveSegSignature = 1885434470;
pub const cmsCurveSegSignature_cmsSigSampledCurveSeg: cmsCurveSegSignature = 1935764838;
pub const cmsCurveSegSignature_cmsSigSegmentedCurve: cmsCurveSegSignature = 1668641382;
pub type cmsCurveSegSignature = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsICCData {
    pub len: cmsUInt32Number,
    pub flag: cmsUInt32Number,
    pub data: [cmsUInt8Number; 1usize],
}
#[test]
fn bindgen_test_layout_cmsICCData() {
    assert_eq!(
        ::std::mem::size_of::<cmsICCData>(),
        12usize,
        concat!("Size of: ", stringify!(cmsICCData))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsICCData>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsICCData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCData>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCData),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCData>())).flag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCData),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCData>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsDateTimeNumber {
    pub year: cmsUInt16Number,
    pub month: cmsUInt16Number,
    pub day: cmsUInt16Number,
    pub hours: cmsUInt16Number,
    pub minutes: cmsUInt16Number,
    pub seconds: cmsUInt16Number,
}
#[test]
fn bindgen_test_layout_cmsDateTimeNumber() {
    assert_eq!(
        ::std::mem::size_of::<cmsDateTimeNumber>(),
        12usize,
        concat!("Size of: ", stringify!(cmsDateTimeNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsDateTimeNumber>(),
        2usize,
        concat!("Alignment of ", stringify!(cmsDateTimeNumber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).day as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).hours as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).minutes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsDateTimeNumber>())).seconds as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsDateTimeNumber),
            "::",
            stringify!(seconds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsEncodedXYZNumber {
    pub X: cmsS15Fixed16Number,
    pub Y: cmsS15Fixed16Number,
    pub Z: cmsS15Fixed16Number,
}
#[test]
fn bindgen_test_layout_cmsEncodedXYZNumber() {
    assert_eq!(
        ::std::mem::size_of::<cmsEncodedXYZNumber>(),
        12usize,
        concat!("Size of: ", stringify!(cmsEncodedXYZNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsEncodedXYZNumber>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsEncodedXYZNumber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsEncodedXYZNumber>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsEncodedXYZNumber),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsEncodedXYZNumber>())).Y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsEncodedXYZNumber),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsEncodedXYZNumber>())).Z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsEncodedXYZNumber),
            "::",
            stringify!(Z)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cmsProfileID {
    pub ID8: [cmsUInt8Number; 16usize],
    pub ID16: [cmsUInt16Number; 8usize],
    pub ID32: [cmsUInt32Number; 4usize],
}
#[test]
fn bindgen_test_layout_cmsProfileID() {
    assert_eq!(
        ::std::mem::size_of::<cmsProfileID>(),
        16usize,
        concat!("Size of: ", stringify!(cmsProfileID))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsProfileID>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsProfileID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsProfileID>())).ID8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsProfileID),
            "::",
            stringify!(ID8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsProfileID>())).ID16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsProfileID),
            "::",
            stringify!(ID16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsProfileID>())).ID32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsProfileID),
            "::",
            stringify!(ID32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmsICCHeader {
    pub size: cmsUInt32Number,
    pub cmmId: cmsSignature,
    pub version: cmsUInt32Number,
    pub deviceClass: cmsProfileClassSignature,
    pub colorSpace: cmsColorSpaceSignature,
    pub pcs: cmsColorSpaceSignature,
    pub date: cmsDateTimeNumber,
    pub magic: cmsSignature,
    pub platform: cmsPlatformSignature,
    pub flags: cmsUInt32Number,
    pub manufacturer: cmsSignature,
    pub model: cmsUInt32Number,
    pub attributes: cmsUInt64Number,
    pub renderingIntent: cmsUInt32Number,
    pub illuminant: cmsEncodedXYZNumber,
    pub creator: cmsSignature,
    pub profileID: cmsProfileID,
    pub reserved: [cmsInt8Number; 28usize],
}
#[test]
fn bindgen_test_layout_cmsICCHeader() {
    assert_eq!(
        ::std::mem::size_of::<cmsICCHeader>(),
        128usize,
        concat!("Size of: ", stringify!(cmsICCHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsICCHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsICCHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).cmmId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(cmmId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).deviceClass as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(deviceClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).colorSpace as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(colorSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).pcs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(pcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).date as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).magic as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).platform as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).manufacturer as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(manufacturer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).model as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).attributes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).renderingIntent as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(renderingIntent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).illuminant as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(illuminant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).creator as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(creator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).profileID as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(profileID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsICCHeader>())).reserved as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCHeader),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsTagBase {
    pub sig: cmsTagTypeSignature,
    pub reserved: [cmsInt8Number; 4usize],
}
#[test]
fn bindgen_test_layout_cmsTagBase() {
    assert_eq!(
        ::std::mem::size_of::<cmsTagBase>(),
        8usize,
        concat!("Size of: ", stringify!(cmsTagBase))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsTagBase>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsTagBase))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagBase>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagBase),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagBase>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagBase),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsTagEntry {
    pub sig: cmsTagSignature,
    pub offset: cmsUInt32Number,
    pub size: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout_cmsTagEntry() {
    assert_eq!(
        ::std::mem::size_of::<cmsTagEntry>(),
        12usize,
        concat!("Size of: ", stringify!(cmsTagEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsTagEntry>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsTagEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagEntry>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagEntry),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagEntry>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagEntry>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagEntry),
            "::",
            stringify!(size)
        )
    );
}
pub type cmsHANDLE = *mut ::std::os::raw::c_void;
pub type cmsHPROFILE = *mut ::std::os::raw::c_void;
pub type cmsHTRANSFORM = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIEXYZ {
    pub X: cmsFloat64Number,
    pub Y: cmsFloat64Number,
    pub Z: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsCIEXYZ() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIEXYZ>(),
        24usize,
        concat!("Size of: ", stringify!(cmsCIEXYZ))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIEXYZ>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIEXYZ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZ>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZ),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZ>())).Y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZ),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZ>())).Z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZ),
            "::",
            stringify!(Z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIExyY {
    pub x: cmsFloat64Number,
    pub y: cmsFloat64Number,
    pub Y: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsCIExyY() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIExyY>(),
        24usize,
        concat!("Size of: ", stringify!(cmsCIExyY))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIExyY>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIExyY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyY>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyY),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyY>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyY),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyY>())).Y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyY),
            "::",
            stringify!(Y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIELab {
    pub L: cmsFloat64Number,
    pub a: cmsFloat64Number,
    pub b: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsCIELab() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIELab>(),
        24usize,
        concat!("Size of: ", stringify!(cmsCIELab))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIELab>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIELab))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELab>())).L as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELab),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELab>())).a as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELab),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELab>())).b as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELab),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIELCh {
    pub L: cmsFloat64Number,
    pub C: cmsFloat64Number,
    pub h: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsCIELCh() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIELCh>(),
        24usize,
        concat!("Size of: ", stringify!(cmsCIELCh))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIELCh>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIELCh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELCh>())).L as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELCh),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELCh>())).C as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELCh),
            "::",
            stringify!(C)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIELCh>())).h as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIELCh),
            "::",
            stringify!(h)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsJCh {
    pub J: cmsFloat64Number,
    pub C: cmsFloat64Number,
    pub h: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsJCh() {
    assert_eq!(
        ::std::mem::size_of::<cmsJCh>(),
        24usize,
        concat!("Size of: ", stringify!(cmsJCh))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsJCh>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsJCh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsJCh>())).J as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cmsJCh), "::", stringify!(J))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsJCh>())).C as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(cmsJCh), "::", stringify!(C))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsJCh>())).h as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cmsJCh), "::", stringify!(h))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIEXYZTRIPLE {
    pub Red: cmsCIEXYZ,
    pub Green: cmsCIEXYZ,
    pub Blue: cmsCIEXYZ,
}
#[test]
fn bindgen_test_layout_cmsCIEXYZTRIPLE() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIEXYZTRIPLE>(),
        72usize,
        concat!("Size of: ", stringify!(cmsCIEXYZTRIPLE))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIEXYZTRIPLE>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIEXYZTRIPLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZTRIPLE>())).Red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZTRIPLE),
            "::",
            stringify!(Red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZTRIPLE>())).Green as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZTRIPLE),
            "::",
            stringify!(Green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIEXYZTRIPLE>())).Blue as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIEXYZTRIPLE),
            "::",
            stringify!(Blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCIExyYTRIPLE {
    pub Red: cmsCIExyY,
    pub Green: cmsCIExyY,
    pub Blue: cmsCIExyY,
}
#[test]
fn bindgen_test_layout_cmsCIExyYTRIPLE() {
    assert_eq!(
        ::std::mem::size_of::<cmsCIExyYTRIPLE>(),
        72usize,
        concat!("Size of: ", stringify!(cmsCIExyYTRIPLE))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCIExyYTRIPLE>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCIExyYTRIPLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyYTRIPLE>())).Red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyYTRIPLE),
            "::",
            stringify!(Red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyYTRIPLE>())).Green as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyYTRIPLE),
            "::",
            stringify!(Green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCIExyYTRIPLE>())).Blue as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCIExyYTRIPLE),
            "::",
            stringify!(Blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsICCMeasurementConditions {
    pub Observer: cmsUInt32Number,
    pub Backing: cmsCIEXYZ,
    pub Geometry: cmsUInt32Number,
    pub Flare: cmsFloat64Number,
    pub IlluminantType: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout_cmsICCMeasurementConditions() {
    assert_eq!(
        ::std::mem::size_of::<cmsICCMeasurementConditions>(),
        56usize,
        concat!("Size of: ", stringify!(cmsICCMeasurementConditions))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsICCMeasurementConditions>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsICCMeasurementConditions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCMeasurementConditions>())).Observer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCMeasurementConditions),
            "::",
            stringify!(Observer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCMeasurementConditions>())).Backing as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCMeasurementConditions),
            "::",
            stringify!(Backing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCMeasurementConditions>())).Geometry as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCMeasurementConditions),
            "::",
            stringify!(Geometry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCMeasurementConditions>())).Flare as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCMeasurementConditions),
            "::",
            stringify!(Flare)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCMeasurementConditions>())).IlluminantType as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCMeasurementConditions),
            "::",
            stringify!(IlluminantType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsICCViewingConditions {
    pub IlluminantXYZ: cmsCIEXYZ,
    pub SurroundXYZ: cmsCIEXYZ,
    pub IlluminantType: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout_cmsICCViewingConditions() {
    assert_eq!(
        ::std::mem::size_of::<cmsICCViewingConditions>(),
        56usize,
        concat!("Size of: ", stringify!(cmsICCViewingConditions))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsICCViewingConditions>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsICCViewingConditions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCViewingConditions>())).IlluminantXYZ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCViewingConditions),
            "::",
            stringify!(IlluminantXYZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCViewingConditions>())).SurroundXYZ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCViewingConditions),
            "::",
            stringify!(SurroundXYZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsICCViewingConditions>())).IlluminantType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsICCViewingConditions),
            "::",
            stringify!(IlluminantType)
        )
    );
}
extern "C" {
    pub fn cmsGetEncodedCMMversion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsstrcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsfilelength(f: *mut FILE) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmsContext_struct {
    _unused: [u8; 0],
}
pub type cmsContext = *mut _cmsContext_struct;
extern "C" {
    pub fn cmsCreateContext(
        Plugin: *mut ::std::os::raw::c_void,
        UserData: *mut ::std::os::raw::c_void,
    ) -> cmsContext;
}
extern "C" {
    pub fn cmsDeleteContext(ContextID: cmsContext);
}
extern "C" {
    pub fn cmsDupContext(
        ContextID: cmsContext,
        NewUserData: *mut ::std::os::raw::c_void,
    ) -> cmsContext;
}
extern "C" {
    pub fn cmsGetContextUserData(ContextID: cmsContext) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cmsPlugin(Plugin: *mut ::std::os::raw::c_void) -> cmsBool;
}
extern "C" {
    pub fn cmsPluginTHR(ContextID: cmsContext, Plugin: *mut ::std::os::raw::c_void) -> cmsBool;
}
extern "C" {
    pub fn cmsUnregisterPlugins();
}
extern "C" {
    pub fn cmsUnregisterPluginsTHR(ContextID: cmsContext);
}
pub type cmsLogErrorHandlerFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        ErrorCode: cmsUInt32Number,
        Text: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn cmsSetLogErrorHandler(Fn: cmsLogErrorHandlerFunction);
}
extern "C" {
    pub fn cmsSetLogErrorHandlerTHR(ContextID: cmsContext, Fn: cmsLogErrorHandlerFunction);
}
extern "C" {
    pub fn cmsD50_XYZ() -> *const cmsCIEXYZ;
}
extern "C" {
    pub fn cmsD50_xyY() -> *const cmsCIExyY;
}
extern "C" {
    pub fn cmsXYZ2xyY(Dest: *mut cmsCIExyY, Source: *const cmsCIEXYZ);
}
extern "C" {
    pub fn cmsxyY2XYZ(Dest: *mut cmsCIEXYZ, Source: *const cmsCIExyY);
}
extern "C" {
    pub fn cmsXYZ2Lab(WhitePoint: *const cmsCIEXYZ, Lab: *mut cmsCIELab, xyz: *const cmsCIEXYZ);
}
extern "C" {
    pub fn cmsLab2XYZ(WhitePoint: *const cmsCIEXYZ, xyz: *mut cmsCIEXYZ, Lab: *const cmsCIELab);
}
extern "C" {
    pub fn cmsLab2LCh(LCh: *mut cmsCIELCh, Lab: *const cmsCIELab);
}
extern "C" {
    pub fn cmsLCh2Lab(Lab: *mut cmsCIELab, LCh: *const cmsCIELCh);
}
extern "C" {
    pub fn cmsLabEncoded2Float(Lab: *mut cmsCIELab, wLab: *const cmsUInt16Number);
}
extern "C" {
    pub fn cmsLabEncoded2FloatV2(Lab: *mut cmsCIELab, wLab: *const cmsUInt16Number);
}
extern "C" {
    pub fn cmsFloat2LabEncoded(wLab: *mut cmsUInt16Number, Lab: *const cmsCIELab);
}
extern "C" {
    pub fn cmsFloat2LabEncodedV2(wLab: *mut cmsUInt16Number, Lab: *const cmsCIELab);
}
extern "C" {
    pub fn cmsXYZEncoded2Float(fxyz: *mut cmsCIEXYZ, XYZ: *const cmsUInt16Number);
}
extern "C" {
    pub fn cmsFloat2XYZEncoded(XYZ: *mut cmsUInt16Number, fXYZ: *const cmsCIEXYZ);
}
extern "C" {
    pub fn cmsDeltaE(Lab1: *const cmsCIELab, Lab2: *const cmsCIELab) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsCIE94DeltaE(Lab1: *const cmsCIELab, Lab2: *const cmsCIELab) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsBFDdeltaE(Lab1: *const cmsCIELab, Lab2: *const cmsCIELab) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsCMCdeltaE(
        Lab1: *const cmsCIELab,
        Lab2: *const cmsCIELab,
        l: cmsFloat64Number,
        c: cmsFloat64Number,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsCIE2000DeltaE(
        Lab1: *const cmsCIELab,
        Lab2: *const cmsCIELab,
        Kl: cmsFloat64Number,
        Kc: cmsFloat64Number,
        Kh: cmsFloat64Number,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsWhitePointFromTemp(WhitePoint: *mut cmsCIExyY, TempK: cmsFloat64Number) -> cmsBool;
}
extern "C" {
    pub fn cmsTempFromWhitePoint(
        TempK: *mut cmsFloat64Number,
        WhitePoint: *const cmsCIExyY,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsAdaptToIlluminant(
        Result: *mut cmsCIEXYZ,
        SourceWhitePt: *const cmsCIEXYZ,
        Illuminant: *const cmsCIEXYZ,
        Value: *const cmsCIEXYZ,
    ) -> cmsBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsViewingConditions {
    pub whitePoint: cmsCIEXYZ,
    pub Yb: cmsFloat64Number,
    pub La: cmsFloat64Number,
    pub surround: cmsUInt32Number,
    pub D_value: cmsFloat64Number,
}
#[test]
fn bindgen_test_layout_cmsViewingConditions() {
    assert_eq!(
        ::std::mem::size_of::<cmsViewingConditions>(),
        56usize,
        concat!("Size of: ", stringify!(cmsViewingConditions))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsViewingConditions>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsViewingConditions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsViewingConditions>())).whitePoint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsViewingConditions),
            "::",
            stringify!(whitePoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsViewingConditions>())).Yb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsViewingConditions),
            "::",
            stringify!(Yb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsViewingConditions>())).La as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsViewingConditions),
            "::",
            stringify!(La)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsViewingConditions>())).surround as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsViewingConditions),
            "::",
            stringify!(surround)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsViewingConditions>())).D_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsViewingConditions),
            "::",
            stringify!(D_value)
        )
    );
}
extern "C" {
    pub fn cmsCIECAM02Init(ContextID: cmsContext, pVC: *const cmsViewingConditions) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsCIECAM02Done(hModel: cmsHANDLE);
}
extern "C" {
    pub fn cmsCIECAM02Forward(hModel: cmsHANDLE, pIn: *const cmsCIEXYZ, pOut: *mut cmsJCh);
}
extern "C" {
    pub fn cmsCIECAM02Reverse(hModel: cmsHANDLE, pIn: *const cmsJCh, pOut: *mut cmsCIEXYZ);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsCurveSegment {
    pub x0: cmsFloat32Number,
    pub x1: cmsFloat32Number,
    pub Type: cmsInt32Number,
    pub Params: [cmsFloat64Number; 10usize],
    pub nGridPoints: cmsUInt32Number,
    pub SampledPoints: *mut cmsFloat32Number,
}
#[test]
fn bindgen_test_layout_cmsCurveSegment() {
    assert_eq!(
        ::std::mem::size_of::<cmsCurveSegment>(),
        112usize,
        concat!("Size of: ", stringify!(cmsCurveSegment))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsCurveSegment>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsCurveSegment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).x1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).Type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).Params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(Params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).nGridPoints as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(nGridPoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsCurveSegment>())).SampledPoints as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsCurveSegment),
            "::",
            stringify!(SampledPoints)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cms_curve_struct {
    _unused: [u8; 0],
}
pub type cmsToneCurve = _cms_curve_struct;
extern "C" {
    pub fn cmsBuildSegmentedToneCurve(
        ContextID: cmsContext,
        nSegments: cmsUInt32Number,
        Segments: *const cmsCurveSegment,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsBuildParametricToneCurve(
        ContextID: cmsContext,
        Type: cmsInt32Number,
        Params: *const cmsFloat64Number,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsBuildGamma(ContextID: cmsContext, Gamma: cmsFloat64Number) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsBuildTabulatedToneCurve16(
        ContextID: cmsContext,
        nEntries: cmsUInt32Number,
        values: *const cmsUInt16Number,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsBuildTabulatedToneCurveFloat(
        ContextID: cmsContext,
        nEntries: cmsUInt32Number,
        values: *const cmsFloat32Number,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsFreeToneCurve(Curve: *mut cmsToneCurve);
}
extern "C" {
    pub fn cmsFreeToneCurveTriple(Curve: *mut *mut cmsToneCurve);
}
extern "C" {
    pub fn cmsDupToneCurve(Src: *const cmsToneCurve) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsReverseToneCurve(InGamma: *const cmsToneCurve) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsReverseToneCurveEx(
        nResultSamples: cmsUInt32Number,
        InGamma: *const cmsToneCurve,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsJoinToneCurve(
        ContextID: cmsContext,
        X: *const cmsToneCurve,
        Y: *const cmsToneCurve,
        nPoints: cmsUInt32Number,
    ) -> *mut cmsToneCurve;
}
extern "C" {
    pub fn cmsSmoothToneCurve(Tab: *mut cmsToneCurve, lambda: cmsFloat64Number) -> cmsBool;
}
extern "C" {
    pub fn cmsEvalToneCurveFloat(
        Curve: *const cmsToneCurve,
        v: cmsFloat32Number,
    ) -> cmsFloat32Number;
}
extern "C" {
    pub fn cmsEvalToneCurve16(Curve: *const cmsToneCurve, v: cmsUInt16Number) -> cmsUInt16Number;
}
extern "C" {
    pub fn cmsIsToneCurveMultisegment(InGamma: *const cmsToneCurve) -> cmsBool;
}
extern "C" {
    pub fn cmsIsToneCurveLinear(Curve: *const cmsToneCurve) -> cmsBool;
}
extern "C" {
    pub fn cmsIsToneCurveMonotonic(t: *const cmsToneCurve) -> cmsBool;
}
extern "C" {
    pub fn cmsIsToneCurveDescending(t: *const cmsToneCurve) -> cmsBool;
}
extern "C" {
    pub fn cmsGetToneCurveParametricType(t: *const cmsToneCurve) -> cmsInt32Number;
}
extern "C" {
    pub fn cmsEstimateGamma(
        t: *const cmsToneCurve,
        Precision: cmsFloat64Number,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsGetToneCurveParams(t: *const cmsToneCurve) -> *mut cmsFloat64Number;
}
extern "C" {
    pub fn cmsGetToneCurveEstimatedTableEntries(t: *const cmsToneCurve) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetToneCurveEstimatedTable(t: *const cmsToneCurve) -> *const cmsUInt16Number;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmsPipeline_struct {
    _unused: [u8; 0],
}
pub type cmsPipeline = _cmsPipeline_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmsStage_struct {
    _unused: [u8; 0],
}
pub type cmsStage = _cmsStage_struct;
extern "C" {
    pub fn cmsPipelineAlloc(
        ContextID: cmsContext,
        InputChannels: cmsUInt32Number,
        OutputChannels: cmsUInt32Number,
    ) -> *mut cmsPipeline;
}
extern "C" {
    pub fn cmsPipelineFree(lut: *mut cmsPipeline);
}
extern "C" {
    pub fn cmsPipelineDup(Orig: *const cmsPipeline) -> *mut cmsPipeline;
}
extern "C" {
    pub fn cmsGetPipelineContextID(lut: *const cmsPipeline) -> cmsContext;
}
extern "C" {
    pub fn cmsPipelineInputChannels(lut: *const cmsPipeline) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsPipelineOutputChannels(lut: *const cmsPipeline) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsPipelineStageCount(lut: *const cmsPipeline) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsPipelineGetPtrToFirstStage(lut: *const cmsPipeline) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsPipelineGetPtrToLastStage(lut: *const cmsPipeline) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsPipelineEval16(
        In: *const cmsUInt16Number,
        Out: *mut cmsUInt16Number,
        lut: *const cmsPipeline,
    );
}
extern "C" {
    pub fn cmsPipelineEvalFloat(
        In: *const cmsFloat32Number,
        Out: *mut cmsFloat32Number,
        lut: *const cmsPipeline,
    );
}
extern "C" {
    pub fn cmsPipelineEvalReverseFloat(
        Target: *mut cmsFloat32Number,
        Result: *mut cmsFloat32Number,
        Hint: *mut cmsFloat32Number,
        lut: *const cmsPipeline,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsPipelineCat(l1: *mut cmsPipeline, l2: *const cmsPipeline) -> cmsBool;
}
extern "C" {
    pub fn cmsPipelineSetSaveAs8bitsFlag(lut: *mut cmsPipeline, On: cmsBool) -> cmsBool;
}
pub const cmsStageLoc_cmsAT_BEGIN: cmsStageLoc = 0;
pub const cmsStageLoc_cmsAT_END: cmsStageLoc = 1;
pub type cmsStageLoc = ::std::os::raw::c_uint;
extern "C" {
    pub fn cmsPipelineInsertStage(
        lut: *mut cmsPipeline,
        loc: cmsStageLoc,
        mpe: *mut cmsStage,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsPipelineUnlinkStage(lut: *mut cmsPipeline, loc: cmsStageLoc, mpe: *mut *mut cmsStage);
}
extern "C" {
    pub fn cmsPipelineCheckAndRetreiveStages(
        Lut: *const cmsPipeline,
        n: cmsUInt32Number,
        ...
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsStageAllocIdentity(
        ContextID: cmsContext,
        nChannels: cmsUInt32Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocToneCurves(
        ContextID: cmsContext,
        nChannels: cmsUInt32Number,
        Curves: *const *mut cmsToneCurve,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocMatrix(
        ContextID: cmsContext,
        Rows: cmsUInt32Number,
        Cols: cmsUInt32Number,
        Matrix: *const cmsFloat64Number,
        Offset: *const cmsFloat64Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocCLut16bit(
        ContextID: cmsContext,
        nGridPoints: cmsUInt32Number,
        inputChan: cmsUInt32Number,
        outputChan: cmsUInt32Number,
        Table: *const cmsUInt16Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocCLutFloat(
        ContextID: cmsContext,
        nGridPoints: cmsUInt32Number,
        inputChan: cmsUInt32Number,
        outputChan: cmsUInt32Number,
        Table: *const cmsFloat32Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocCLut16bitGranular(
        ContextID: cmsContext,
        clutPoints: *const cmsUInt32Number,
        inputChan: cmsUInt32Number,
        outputChan: cmsUInt32Number,
        Table: *const cmsUInt16Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageAllocCLutFloatGranular(
        ContextID: cmsContext,
        clutPoints: *const cmsUInt32Number,
        inputChan: cmsUInt32Number,
        outputChan: cmsUInt32Number,
        Table: *const cmsFloat32Number,
    ) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageDup(mpe: *mut cmsStage) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageFree(mpe: *mut cmsStage);
}
extern "C" {
    pub fn cmsStageNext(mpe: *const cmsStage) -> *mut cmsStage;
}
extern "C" {
    pub fn cmsStageInputChannels(mpe: *const cmsStage) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsStageOutputChannels(mpe: *const cmsStage) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsStageType(mpe: *const cmsStage) -> cmsStageSignature;
}
extern "C" {
    pub fn cmsStageData(mpe: *const cmsStage) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cmsGetStageContextID(mpe: *const cmsStage) -> cmsContext;
}
pub type cmsSAMPLER16 = ::std::option::Option<
    unsafe extern "C" fn(
        In: *const cmsUInt16Number,
        Out: *mut cmsUInt16Number,
        Cargo: *mut ::std::os::raw::c_void,
    ) -> cmsInt32Number,
>;
pub type cmsSAMPLERFLOAT = ::std::option::Option<
    unsafe extern "C" fn(
        In: *const cmsFloat32Number,
        Out: *mut cmsFloat32Number,
        Cargo: *mut ::std::os::raw::c_void,
    ) -> cmsInt32Number,
>;
extern "C" {
    pub fn cmsStageSampleCLut16bit(
        mpe: *mut cmsStage,
        Sampler: cmsSAMPLER16,
        Cargo: *mut ::std::os::raw::c_void,
        dwFlags: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsStageSampleCLutFloat(
        mpe: *mut cmsStage,
        Sampler: cmsSAMPLERFLOAT,
        Cargo: *mut ::std::os::raw::c_void,
        dwFlags: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsSliceSpace16(
        nInputs: cmsUInt32Number,
        clutPoints: *const cmsUInt32Number,
        Sampler: cmsSAMPLER16,
        Cargo: *mut ::std::os::raw::c_void,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsSliceSpaceFloat(
        nInputs: cmsUInt32Number,
        clutPoints: *const cmsUInt32Number,
        Sampler: cmsSAMPLERFLOAT,
        Cargo: *mut ::std::os::raw::c_void,
    ) -> cmsBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cms_MLU_struct {
    _unused: [u8; 0],
}
pub type cmsMLU = _cms_MLU_struct;
extern "C" {
    pub fn cmsMLUalloc(ContextID: cmsContext, nItems: cmsUInt32Number) -> *mut cmsMLU;
}
extern "C" {
    pub fn cmsMLUfree(mlu: *mut cmsMLU);
}
extern "C" {
    pub fn cmsMLUdup(mlu: *const cmsMLU) -> *mut cmsMLU;
}
extern "C" {
    pub fn cmsMLUsetASCII(
        mlu: *mut cmsMLU,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        ASCIIString: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsMLUsetWide(
        mlu: *mut cmsMLU,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        WideString: *const wchar_t,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsMLUgetASCII(
        mlu: *const cmsMLU,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        Buffer: *mut ::std::os::raw::c_char,
        BufferSize: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsMLUgetWide(
        mlu: *const cmsMLU,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        Buffer: *mut wchar_t,
        BufferSize: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsMLUgetTranslation(
        mlu: *const cmsMLU,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        ObtainedLanguage: *mut ::std::os::raw::c_char,
        ObtainedCountry: *mut ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsMLUtranslationsCount(mlu: *const cmsMLU) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsMLUtranslationsCodes(
        mlu: *const cmsMLU,
        idx: cmsUInt32Number,
        LanguageCode: *mut ::std::os::raw::c_char,
        CountryCode: *mut ::std::os::raw::c_char,
    ) -> cmsBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsUcrBg {
    pub Ucr: *mut cmsToneCurve,
    pub Bg: *mut cmsToneCurve,
    pub Desc: *mut cmsMLU,
}
#[test]
fn bindgen_test_layout_cmsUcrBg() {
    assert_eq!(
        ::std::mem::size_of::<cmsUcrBg>(),
        24usize,
        concat!("Size of: ", stringify!(cmsUcrBg))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsUcrBg>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsUcrBg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsUcrBg>())).Ucr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsUcrBg),
            "::",
            stringify!(Ucr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsUcrBg>())).Bg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsUcrBg),
            "::",
            stringify!(Bg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsUcrBg>())).Desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsUcrBg),
            "::",
            stringify!(Desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsScreeningChannel {
    pub Frequency: cmsFloat64Number,
    pub ScreenAngle: cmsFloat64Number,
    pub SpotShape: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout_cmsScreeningChannel() {
    assert_eq!(
        ::std::mem::size_of::<cmsScreeningChannel>(),
        24usize,
        concat!("Size of: ", stringify!(cmsScreeningChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsScreeningChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsScreeningChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreeningChannel>())).Frequency as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreeningChannel),
            "::",
            stringify!(Frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreeningChannel>())).ScreenAngle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreeningChannel),
            "::",
            stringify!(ScreenAngle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreeningChannel>())).SpotShape as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreeningChannel),
            "::",
            stringify!(SpotShape)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsScreening {
    pub Flag: cmsUInt32Number,
    pub nChannels: cmsUInt32Number,
    pub Channels: [cmsScreeningChannel; 16usize],
}
#[test]
fn bindgen_test_layout_cmsScreening() {
    assert_eq!(
        ::std::mem::size_of::<cmsScreening>(),
        392usize,
        concat!("Size of: ", stringify!(cmsScreening))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsScreening>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsScreening))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreening>())).Flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreening),
            "::",
            stringify!(Flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreening>())).nChannels as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreening),
            "::",
            stringify!(nChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsScreening>())).Channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsScreening),
            "::",
            stringify!(Channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cms_NAMEDCOLORLIST_struct {
    _unused: [u8; 0],
}
pub type cmsNAMEDCOLORLIST = _cms_NAMEDCOLORLIST_struct;
extern "C" {
    pub fn cmsAllocNamedColorList(
        ContextID: cmsContext,
        n: cmsUInt32Number,
        ColorantCount: cmsUInt32Number,
        Prefix: *const ::std::os::raw::c_char,
        Suffix: *const ::std::os::raw::c_char,
    ) -> *mut cmsNAMEDCOLORLIST;
}
extern "C" {
    pub fn cmsFreeNamedColorList(v: *mut cmsNAMEDCOLORLIST);
}
extern "C" {
    pub fn cmsDupNamedColorList(v: *const cmsNAMEDCOLORLIST) -> *mut cmsNAMEDCOLORLIST;
}
extern "C" {
    pub fn cmsAppendNamedColor(
        v: *mut cmsNAMEDCOLORLIST,
        Name: *const ::std::os::raw::c_char,
        PCS: *mut cmsUInt16Number,
        Colorant: *mut cmsUInt16Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsNamedColorCount(v: *const cmsNAMEDCOLORLIST) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsNamedColorIndex(
        v: *const cmsNAMEDCOLORLIST,
        Name: *const ::std::os::raw::c_char,
    ) -> cmsInt32Number;
}
extern "C" {
    pub fn cmsNamedColorInfo(
        NamedColorList: *const cmsNAMEDCOLORLIST,
        nColor: cmsUInt32Number,
        Name: *mut ::std::os::raw::c_char,
        Prefix: *mut ::std::os::raw::c_char,
        Suffix: *mut ::std::os::raw::c_char,
        PCS: *mut cmsUInt16Number,
        Colorant: *mut cmsUInt16Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsGetNamedColorList(xform: cmsHTRANSFORM) -> *mut cmsNAMEDCOLORLIST;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmsPSEQDESC {
    pub deviceMfg: cmsSignature,
    pub deviceModel: cmsSignature,
    pub attributes: cmsUInt64Number,
    pub technology: cmsTechnologySignature,
    pub ProfileID: cmsProfileID,
    pub Manufacturer: *mut cmsMLU,
    pub Model: *mut cmsMLU,
    pub Description: *mut cmsMLU,
}
#[test]
fn bindgen_test_layout_cmsPSEQDESC() {
    assert_eq!(
        ::std::mem::size_of::<cmsPSEQDESC>(),
        64usize,
        concat!("Size of: ", stringify!(cmsPSEQDESC))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPSEQDESC>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPSEQDESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).deviceMfg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(deviceMfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).deviceModel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(deviceModel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).attributes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).technology as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(technology)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).ProfileID as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(ProfileID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).Manufacturer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(Manufacturer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).Model as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(Model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPSEQDESC>())).Description as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPSEQDESC),
            "::",
            stringify!(Description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsSEQ {
    pub n: cmsUInt32Number,
    pub ContextID: cmsContext,
    pub seq: *mut cmsPSEQDESC,
}
#[test]
fn bindgen_test_layout_cmsSEQ() {
    assert_eq!(
        ::std::mem::size_of::<cmsSEQ>(),
        24usize,
        concat!("Size of: ", stringify!(cmsSEQ))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsSEQ>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsSEQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsSEQ>())).n as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(cmsSEQ), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsSEQ>())).ContextID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsSEQ),
            "::",
            stringify!(ContextID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsSEQ>())).seq as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsSEQ),
            "::",
            stringify!(seq)
        )
    );
}
extern "C" {
    pub fn cmsAllocProfileSequenceDescription(
        ContextID: cmsContext,
        n: cmsUInt32Number,
    ) -> *mut cmsSEQ;
}
extern "C" {
    pub fn cmsDupProfileSequenceDescription(pseq: *const cmsSEQ) -> *mut cmsSEQ;
}
extern "C" {
    pub fn cmsFreeProfileSequenceDescription(pseq: *mut cmsSEQ);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmsDICTentry_struct {
    pub Next: *mut _cmsDICTentry_struct,
    pub DisplayName: *mut cmsMLU,
    pub DisplayValue: *mut cmsMLU,
    pub Name: *mut wchar_t,
    pub Value: *mut wchar_t,
}
#[test]
fn bindgen_test_layout__cmsDICTentry_struct() {
    assert_eq!(
        ::std::mem::size_of::<_cmsDICTentry_struct>(),
        40usize,
        concat!("Size of: ", stringify!(_cmsDICTentry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_cmsDICTentry_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_cmsDICTentry_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsDICTentry_struct>())).Next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsDICTentry_struct),
            "::",
            stringify!(Next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cmsDICTentry_struct>())).DisplayName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsDICTentry_struct),
            "::",
            stringify!(DisplayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cmsDICTentry_struct>())).DisplayValue as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsDICTentry_struct),
            "::",
            stringify!(DisplayValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsDICTentry_struct>())).Name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsDICTentry_struct),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsDICTentry_struct>())).Value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsDICTentry_struct),
            "::",
            stringify!(Value)
        )
    );
}
pub type cmsDICTentry = _cmsDICTentry_struct;
extern "C" {
    pub fn cmsDictAlloc(ContextID: cmsContext) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsDictFree(hDict: cmsHANDLE);
}
extern "C" {
    pub fn cmsDictDup(hDict: cmsHANDLE) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsDictAddEntry(
        hDict: cmsHANDLE,
        Name: *const wchar_t,
        Value: *const wchar_t,
        DisplayName: *const cmsMLU,
        DisplayValue: *const cmsMLU,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsDictGetEntryList(hDict: cmsHANDLE) -> *const cmsDICTentry;
}
extern "C" {
    pub fn cmsDictNextEntry(e: *const cmsDICTentry) -> *const cmsDICTentry;
}
extern "C" {
    pub fn cmsCreateProfilePlaceholder(ContextID: cmsContext) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsGetProfileContextID(hProfile: cmsHPROFILE) -> cmsContext;
}
extern "C" {
    pub fn cmsGetTagCount(hProfile: cmsHPROFILE) -> cmsInt32Number;
}
extern "C" {
    pub fn cmsGetTagSignature(hProfile: cmsHPROFILE, n: cmsUInt32Number) -> cmsTagSignature;
}
extern "C" {
    pub fn cmsIsTag(hProfile: cmsHPROFILE, sig: cmsTagSignature) -> cmsBool;
}
extern "C" {
    pub fn cmsReadTag(hProfile: cmsHPROFILE, sig: cmsTagSignature) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cmsWriteTag(
        hProfile: cmsHPROFILE,
        sig: cmsTagSignature,
        data: *const ::std::os::raw::c_void,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsLinkTag(
        hProfile: cmsHPROFILE,
        sig: cmsTagSignature,
        dest: cmsTagSignature,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsTagLinkedTo(hProfile: cmsHPROFILE, sig: cmsTagSignature) -> cmsTagSignature;
}
extern "C" {
    pub fn cmsReadRawTag(
        hProfile: cmsHPROFILE,
        sig: cmsTagSignature,
        Buffer: *mut ::std::os::raw::c_void,
        BufferSize: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsWriteRawTag(
        hProfile: cmsHPROFILE,
        sig: cmsTagSignature,
        data: *const ::std::os::raw::c_void,
        Size: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsGetHeaderFlags(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetHeaderAttributes(hProfile: cmsHPROFILE, Flags: *mut cmsUInt64Number);
}
extern "C" {
    pub fn cmsGetHeaderProfileID(hProfile: cmsHPROFILE, ProfileID: *mut cmsUInt8Number);
}
extern "C" {
    pub fn cmsGetHeaderCreationDateTime(hProfile: cmsHPROFILE, Dest: *mut tm) -> cmsBool;
}
extern "C" {
    pub fn cmsGetHeaderRenderingIntent(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsSetHeaderFlags(hProfile: cmsHPROFILE, Flags: cmsUInt32Number);
}
extern "C" {
    pub fn cmsGetHeaderManufacturer(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsSetHeaderManufacturer(hProfile: cmsHPROFILE, manufacturer: cmsUInt32Number);
}
extern "C" {
    pub fn cmsGetHeaderCreator(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetHeaderModel(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsSetHeaderModel(hProfile: cmsHPROFILE, model: cmsUInt32Number);
}
extern "C" {
    pub fn cmsSetHeaderAttributes(hProfile: cmsHPROFILE, Flags: cmsUInt64Number);
}
extern "C" {
    pub fn cmsSetHeaderProfileID(hProfile: cmsHPROFILE, ProfileID: *mut cmsUInt8Number);
}
extern "C" {
    pub fn cmsSetHeaderRenderingIntent(hProfile: cmsHPROFILE, RenderingIntent: cmsUInt32Number);
}
extern "C" {
    pub fn cmsGetPCS(hProfile: cmsHPROFILE) -> cmsColorSpaceSignature;
}
extern "C" {
    pub fn cmsSetPCS(hProfile: cmsHPROFILE, pcs: cmsColorSpaceSignature);
}
extern "C" {
    pub fn cmsGetColorSpace(hProfile: cmsHPROFILE) -> cmsColorSpaceSignature;
}
extern "C" {
    pub fn cmsSetColorSpace(hProfile: cmsHPROFILE, sig: cmsColorSpaceSignature);
}
extern "C" {
    pub fn cmsGetDeviceClass(hProfile: cmsHPROFILE) -> cmsProfileClassSignature;
}
extern "C" {
    pub fn cmsSetDeviceClass(hProfile: cmsHPROFILE, sig: cmsProfileClassSignature);
}
extern "C" {
    pub fn cmsSetProfileVersion(hProfile: cmsHPROFILE, Version: cmsFloat64Number);
}
extern "C" {
    pub fn cmsGetProfileVersion(hProfile: cmsHPROFILE) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsGetEncodedICCversion(hProfile: cmsHPROFILE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsSetEncodedICCversion(hProfile: cmsHPROFILE, Version: cmsUInt32Number);
}
extern "C" {
    pub fn cmsIsIntentSupported(
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        UsedDirection: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIsMatrixShaper(hProfile: cmsHPROFILE) -> cmsBool;
}
extern "C" {
    pub fn cmsIsCLUT(
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        UsedDirection: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsChannelsOf(ColorSpace: cmsColorSpaceSignature) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsFormatterForColorspaceOfProfile(
        hProfile: cmsHPROFILE,
        nBytes: cmsUInt32Number,
        lIsFloat: cmsBool,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsFormatterForPCSOfProfile(
        hProfile: cmsHPROFILE,
        nBytes: cmsUInt32Number,
        lIsFloat: cmsBool,
    ) -> cmsUInt32Number;
}
pub const cmsInfoType_cmsInfoDescription: cmsInfoType = 0;
pub const cmsInfoType_cmsInfoManufacturer: cmsInfoType = 1;
pub const cmsInfoType_cmsInfoModel: cmsInfoType = 2;
pub const cmsInfoType_cmsInfoCopyright: cmsInfoType = 3;
pub type cmsInfoType = ::std::os::raw::c_uint;
extern "C" {
    pub fn cmsGetProfileInfo(
        hProfile: cmsHPROFILE,
        Info: cmsInfoType,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        Buffer: *mut wchar_t,
        BufferSize: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetProfileInfoASCII(
        hProfile: cmsHPROFILE,
        Info: cmsInfoType,
        LanguageCode: *const ::std::os::raw::c_char,
        CountryCode: *const ::std::os::raw::c_char,
        Buffer: *mut ::std::os::raw::c_char,
        BufferSize: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
pub type cmsIOHANDLER = _cms_io_handler;
extern "C" {
    pub fn cmsOpenIOhandlerFromFile(
        ContextID: cmsContext,
        FileName: *const ::std::os::raw::c_char,
        AccessMode: *const ::std::os::raw::c_char,
    ) -> *mut cmsIOHANDLER;
}
extern "C" {
    pub fn cmsOpenIOhandlerFromStream(
        ContextID: cmsContext,
        Stream: *mut FILE,
    ) -> *mut cmsIOHANDLER;
}
extern "C" {
    pub fn cmsOpenIOhandlerFromMem(
        ContextID: cmsContext,
        Buffer: *mut ::std::os::raw::c_void,
        size: cmsUInt32Number,
        AccessMode: *const ::std::os::raw::c_char,
    ) -> *mut cmsIOHANDLER;
}
extern "C" {
    pub fn cmsOpenIOhandlerFromNULL(ContextID: cmsContext) -> *mut cmsIOHANDLER;
}
extern "C" {
    pub fn cmsGetProfileIOhandler(hProfile: cmsHPROFILE) -> *mut cmsIOHANDLER;
}
extern "C" {
    pub fn cmsCloseIOhandler(io: *mut cmsIOHANDLER) -> cmsBool;
}
extern "C" {
    pub fn cmsMD5computeID(hProfile: cmsHPROFILE) -> cmsBool;
}
extern "C" {
    pub fn cmsOpenProfileFromFile(
        ICCProfile: *const ::std::os::raw::c_char,
        sAccess: *const ::std::os::raw::c_char,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromFileTHR(
        ContextID: cmsContext,
        ICCProfile: *const ::std::os::raw::c_char,
        sAccess: *const ::std::os::raw::c_char,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromStream(
        ICCProfile: *mut FILE,
        sAccess: *const ::std::os::raw::c_char,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromStreamTHR(
        ContextID: cmsContext,
        ICCProfile: *mut FILE,
        sAccess: *const ::std::os::raw::c_char,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromMem(
        MemPtr: *const ::std::os::raw::c_void,
        dwSize: cmsUInt32Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromMemTHR(
        ContextID: cmsContext,
        MemPtr: *const ::std::os::raw::c_void,
        dwSize: cmsUInt32Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromIOhandlerTHR(
        ContextID: cmsContext,
        io: *mut cmsIOHANDLER,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsOpenProfileFromIOhandler2THR(
        ContextID: cmsContext,
        io: *mut cmsIOHANDLER,
        write: cmsBool,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCloseProfile(hProfile: cmsHPROFILE) -> cmsBool;
}
extern "C" {
    pub fn cmsSaveProfileToFile(
        hProfile: cmsHPROFILE,
        FileName: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsSaveProfileToStream(hProfile: cmsHPROFILE, Stream: *mut FILE) -> cmsBool;
}
extern "C" {
    pub fn cmsSaveProfileToMem(
        hProfile: cmsHPROFILE,
        MemPtr: *mut ::std::os::raw::c_void,
        BytesNeeded: *mut cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsSaveProfileToIOhandler(
        hProfile: cmsHPROFILE,
        io: *mut cmsIOHANDLER,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsCreateRGBProfileTHR(
        ContextID: cmsContext,
        WhitePoint: *const cmsCIExyY,
        Primaries: *const cmsCIExyYTRIPLE,
        TransferFunction: *const *mut cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateRGBProfile(
        WhitePoint: *const cmsCIExyY,
        Primaries: *const cmsCIExyYTRIPLE,
        TransferFunction: *const *mut cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateGrayProfileTHR(
        ContextID: cmsContext,
        WhitePoint: *const cmsCIExyY,
        TransferFunction: *const cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateGrayProfile(
        WhitePoint: *const cmsCIExyY,
        TransferFunction: *const cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLinearizationDeviceLinkTHR(
        ContextID: cmsContext,
        ColorSpace: cmsColorSpaceSignature,
        TransferFunctions: *const *mut cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLinearizationDeviceLink(
        ColorSpace: cmsColorSpaceSignature,
        TransferFunctions: *const *mut cmsToneCurve,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateInkLimitingDeviceLinkTHR(
        ContextID: cmsContext,
        ColorSpace: cmsColorSpaceSignature,
        Limit: cmsFloat64Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateInkLimitingDeviceLink(
        ColorSpace: cmsColorSpaceSignature,
        Limit: cmsFloat64Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLab2ProfileTHR(
        ContextID: cmsContext,
        WhitePoint: *const cmsCIExyY,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLab2Profile(WhitePoint: *const cmsCIExyY) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLab4ProfileTHR(
        ContextID: cmsContext,
        WhitePoint: *const cmsCIExyY,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateLab4Profile(WhitePoint: *const cmsCIExyY) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateXYZProfileTHR(ContextID: cmsContext) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateXYZProfile() -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreate_sRGBProfileTHR(ContextID: cmsContext) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreate_sRGBProfile() -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateBCHSWabstractProfileTHR(
        ContextID: cmsContext,
        nLUTPoints: cmsUInt32Number,
        Bright: cmsFloat64Number,
        Contrast: cmsFloat64Number,
        Hue: cmsFloat64Number,
        Saturation: cmsFloat64Number,
        TempSrc: cmsUInt32Number,
        TempDest: cmsUInt32Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateBCHSWabstractProfile(
        nLUTPoints: cmsUInt32Number,
        Bright: cmsFloat64Number,
        Contrast: cmsFloat64Number,
        Hue: cmsFloat64Number,
        Saturation: cmsFloat64Number,
        TempSrc: cmsUInt32Number,
        TempDest: cmsUInt32Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateNULLProfileTHR(ContextID: cmsContext) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsCreateNULLProfile() -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsTransform2DeviceLink(
        hTransform: cmsHTRANSFORM,
        Version: cmsFloat64Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHPROFILE;
}
extern "C" {
    pub fn cmsGetSupportedIntents(
        nMax: cmsUInt32Number,
        Codes: *mut cmsUInt32Number,
        Descriptions: *mut *mut ::std::os::raw::c_char,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetSupportedIntentsTHR(
        ContextID: cmsContext,
        nMax: cmsUInt32Number,
        Codes: *mut cmsUInt32Number,
        Descriptions: *mut *mut ::std::os::raw::c_char,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsCreateTransformTHR(
        ContextID: cmsContext,
        Input: cmsHPROFILE,
        InputFormat: cmsUInt32Number,
        Output: cmsHPROFILE,
        OutputFormat: cmsUInt32Number,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateTransform(
        Input: cmsHPROFILE,
        InputFormat: cmsUInt32Number,
        Output: cmsHPROFILE,
        OutputFormat: cmsUInt32Number,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateProofingTransformTHR(
        ContextID: cmsContext,
        Input: cmsHPROFILE,
        InputFormat: cmsUInt32Number,
        Output: cmsHPROFILE,
        OutputFormat: cmsUInt32Number,
        Proofing: cmsHPROFILE,
        Intent: cmsUInt32Number,
        ProofingIntent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateProofingTransform(
        Input: cmsHPROFILE,
        InputFormat: cmsUInt32Number,
        Output: cmsHPROFILE,
        OutputFormat: cmsUInt32Number,
        Proofing: cmsHPROFILE,
        Intent: cmsUInt32Number,
        ProofingIntent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateMultiprofileTransformTHR(
        ContextID: cmsContext,
        hProfiles: *mut cmsHPROFILE,
        nProfiles: cmsUInt32Number,
        InputFormat: cmsUInt32Number,
        OutputFormat: cmsUInt32Number,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateMultiprofileTransform(
        hProfiles: *mut cmsHPROFILE,
        nProfiles: cmsUInt32Number,
        InputFormat: cmsUInt32Number,
        OutputFormat: cmsUInt32Number,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsCreateExtendedTransform(
        ContextID: cmsContext,
        nProfiles: cmsUInt32Number,
        hProfiles: *mut cmsHPROFILE,
        BPC: *mut cmsBool,
        Intents: *mut cmsUInt32Number,
        AdaptationStates: *mut cmsFloat64Number,
        hGamutProfile: cmsHPROFILE,
        nGamutPCSposition: cmsUInt32Number,
        InputFormat: cmsUInt32Number,
        OutputFormat: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsHTRANSFORM;
}
extern "C" {
    pub fn cmsDeleteTransform(hTransform: cmsHTRANSFORM);
}
extern "C" {
    pub fn cmsDoTransform(
        Transform: cmsHTRANSFORM,
        InputBuffer: *const ::std::os::raw::c_void,
        OutputBuffer: *mut ::std::os::raw::c_void,
        Size: cmsUInt32Number,
    );
}
extern "C" {
    pub fn cmsDoTransformStride(
        Transform: cmsHTRANSFORM,
        InputBuffer: *const ::std::os::raw::c_void,
        OutputBuffer: *mut ::std::os::raw::c_void,
        Size: cmsUInt32Number,
        Stride: cmsUInt32Number,
    );
}
extern "C" {
    pub fn cmsDoTransformLineStride(
        Transform: cmsHTRANSFORM,
        InputBuffer: *const ::std::os::raw::c_void,
        OutputBuffer: *mut ::std::os::raw::c_void,
        PixelsPerLine: cmsUInt32Number,
        LineCount: cmsUInt32Number,
        BytesPerLineIn: cmsUInt32Number,
        BytesPerLineOut: cmsUInt32Number,
        BytesPerPlaneIn: cmsUInt32Number,
        BytesPerPlaneOut: cmsUInt32Number,
    );
}
extern "C" {
    pub fn cmsSetAlarmCodes(NewAlarm: *const cmsUInt16Number);
}
extern "C" {
    pub fn cmsGetAlarmCodes(NewAlarm: *mut cmsUInt16Number);
}
extern "C" {
    pub fn cmsSetAlarmCodesTHR(ContextID: cmsContext, AlarmCodes: *const cmsUInt16Number);
}
extern "C" {
    pub fn cmsGetAlarmCodesTHR(ContextID: cmsContext, AlarmCodes: *mut cmsUInt16Number);
}
extern "C" {
    pub fn cmsSetAdaptationState(d: cmsFloat64Number) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsSetAdaptationStateTHR(ContextID: cmsContext, d: cmsFloat64Number)
        -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsGetTransformContextID(hTransform: cmsHTRANSFORM) -> cmsContext;
}
extern "C" {
    pub fn cmsGetTransformInputFormat(hTransform: cmsHTRANSFORM) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetTransformOutputFormat(hTransform: cmsHTRANSFORM) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsChangeBuffersFormat(
        hTransform: cmsHTRANSFORM,
        InputFormat: cmsUInt32Number,
        OutputFormat: cmsUInt32Number,
    ) -> cmsBool;
}
pub const cmsPSResourceType_cmsPS_RESOURCE_CSA: cmsPSResourceType = 0;
pub const cmsPSResourceType_cmsPS_RESOURCE_CRD: cmsPSResourceType = 1;
pub type cmsPSResourceType = ::std::os::raw::c_uint;
extern "C" {
    pub fn cmsGetPostScriptColorResource(
        ContextID: cmsContext,
        Type: cmsPSResourceType,
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
        io: *mut cmsIOHANDLER,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetPostScriptCSA(
        ContextID: cmsContext,
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
        Buffer: *mut ::std::os::raw::c_void,
        dwBufferLen: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsGetPostScriptCRD(
        ContextID: cmsContext,
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
        Buffer: *mut ::std::os::raw::c_void,
        dwBufferLen: cmsUInt32Number,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsIT8Alloc(ContextID: cmsContext) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsIT8Free(hIT8: cmsHANDLE);
}
extern "C" {
    pub fn cmsIT8TableCount(hIT8: cmsHANDLE) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsIT8SetTable(hIT8: cmsHANDLE, nTable: cmsUInt32Number) -> cmsInt32Number;
}
extern "C" {
    pub fn cmsIT8LoadFromFile(
        ContextID: cmsContext,
        cFileName: *const ::std::os::raw::c_char,
    ) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsIT8LoadFromMem(
        ContextID: cmsContext,
        Ptr: *const ::std::os::raw::c_void,
        len: cmsUInt32Number,
    ) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsIT8SaveToFile(hIT8: cmsHANDLE, cFileName: *const ::std::os::raw::c_char) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SaveToMem(
        hIT8: cmsHANDLE,
        MemPtr: *mut ::std::os::raw::c_void,
        BytesNeeded: *mut cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8GetSheetType(hIT8: cmsHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8SetSheetType(hIT8: cmsHANDLE, Type: *const ::std::os::raw::c_char) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetComment(hIT8: cmsHANDLE, cComment: *const ::std::os::raw::c_char) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetPropertyStr(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
        Str: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetPropertyDbl(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
        Val: cmsFloat64Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetPropertyHex(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
        Val: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetPropertyMulti(
        hIT8: cmsHANDLE,
        Key: *const ::std::os::raw::c_char,
        SubKey: *const ::std::os::raw::c_char,
        Buffer: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetPropertyUncooked(
        hIT8: cmsHANDLE,
        Key: *const ::std::os::raw::c_char,
        Buffer: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8GetProperty(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8GetPropertyDbl(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsIT8GetPropertyMulti(
        hIT8: cmsHANDLE,
        Key: *const ::std::os::raw::c_char,
        SubKey: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8EnumProperties(
        hIT8: cmsHANDLE,
        PropertyNames: *mut *mut *mut ::std::os::raw::c_char,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsIT8EnumPropertyMulti(
        hIT8: cmsHANDLE,
        cProp: *const ::std::os::raw::c_char,
        SubpropertyNames: *mut *mut *const ::std::os::raw::c_char,
    ) -> cmsUInt32Number;
}
extern "C" {
    pub fn cmsIT8GetDataRowCol(
        hIT8: cmsHANDLE,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8GetDataRowColDbl(
        hIT8: cmsHANDLE,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsIT8SetDataRowCol(
        hIT8: cmsHANDLE,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        Val: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetDataRowColDbl(
        hIT8: cmsHANDLE,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        Val: cmsFloat64Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8GetData(
        hIT8: cmsHANDLE,
        cPatch: *const ::std::os::raw::c_char,
        cSample: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8GetDataDbl(
        hIT8: cmsHANDLE,
        cPatch: *const ::std::os::raw::c_char,
        cSample: *const ::std::os::raw::c_char,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsIT8SetData(
        hIT8: cmsHANDLE,
        cPatch: *const ::std::os::raw::c_char,
        cSample: *const ::std::os::raw::c_char,
        Val: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8SetDataDbl(
        hIT8: cmsHANDLE,
        cPatch: *const ::std::os::raw::c_char,
        cSample: *const ::std::os::raw::c_char,
        Val: cmsFloat64Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8FindDataFormat(
        hIT8: cmsHANDLE,
        cSample: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsIT8SetDataFormat(
        hIT8: cmsHANDLE,
        n: ::std::os::raw::c_int,
        Sample: *const ::std::os::raw::c_char,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsIT8EnumDataFormat(
        hIT8: cmsHANDLE,
        SampleNames: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsIT8GetPatchName(
        hIT8: cmsHANDLE,
        nPatch: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmsIT8GetPatchByName(
        hIT8: cmsHANDLE,
        cPatch: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsIT8SetTableByLabel(
        hIT8: cmsHANDLE,
        cSet: *const ::std::os::raw::c_char,
        cField: *const ::std::os::raw::c_char,
        ExpectedType: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmsIT8SetIndexColumn(hIT8: cmsHANDLE, cSample: *const ::std::os::raw::c_char)
        -> cmsBool;
}
extern "C" {
    pub fn cmsIT8DefineDblFormat(hIT8: cmsHANDLE, Formatter: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cmsGBDAlloc(ContextID: cmsContext) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsGBDFree(hGBD: cmsHANDLE);
}
extern "C" {
    pub fn cmsGDBAddPoint(hGBD: cmsHANDLE, Lab: *const cmsCIELab) -> cmsBool;
}
extern "C" {
    pub fn cmsGDBCompute(hGDB: cmsHANDLE, dwFlags: cmsUInt32Number) -> cmsBool;
}
extern "C" {
    pub fn cmsGDBCheckPoint(hGBD: cmsHANDLE, Lab: *const cmsCIELab) -> cmsBool;
}
extern "C" {
    pub fn cmsDetectBlackPoint(
        BlackPoint: *mut cmsCIEXYZ,
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsDetectDestinationBlackPoint(
        BlackPoint: *mut cmsCIEXYZ,
        hProfile: cmsHPROFILE,
        Intent: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsBool;
}
extern "C" {
    pub fn cmsDetectTAC(hProfile: cmsHPROFILE) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsDetectRGBProfileGamma(
        hProfile: cmsHPROFILE,
        threshold: cmsFloat64Number,
    ) -> cmsFloat64Number;
}
extern "C" {
    pub fn cmsDesaturateLab(
        Lab: *mut cmsCIELab,
        amax: f64,
        amin: f64,
        bmax: f64,
        bmin: f64,
    ) -> cmsBool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsVEC3 {
    pub n: [cmsFloat64Number; 3usize],
}
#[test]
fn bindgen_test_layout_cmsVEC3() {
    assert_eq!(
        ::std::mem::size_of::<cmsVEC3>(),
        24usize,
        concat!("Size of: ", stringify!(cmsVEC3))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsVEC3>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsVEC3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsVEC3>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsVEC3),
            "::",
            stringify!(n)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsMAT3 {
    pub v: [cmsVEC3; 3usize],
}
#[test]
fn bindgen_test_layout_cmsMAT3() {
    assert_eq!(
        ::std::mem::size_of::<cmsMAT3>(),
        72usize,
        concat!("Size of: ", stringify!(cmsMAT3))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsMAT3>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsMAT3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsMAT3>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsMAT3),
            "::",
            stringify!(v)
        )
    );
}
extern "C" {
    pub fn cmsMD5alloc(ContextID: cmsContext) -> cmsHANDLE;
}
extern "C" {
    pub fn cmsMD5add(Handle: cmsHANDLE, buf: *const cmsUInt8Number, len: cmsUInt32Number);
}
extern "C" {
    pub fn cmsMD5finish(ProfileID: *mut cmsProfileID, Handle: cmsHANDLE);
}
extern "C" {
    pub fn cmsSignalError(
        ContextID: cmsContext,
        ErrorCode: cmsUInt32Number,
        ErrorText: *const ::std::os::raw::c_char,
        ...
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cms_io_handler {
    pub stream: *mut ::std::os::raw::c_void,
    pub ContextID: cmsContext,
    pub UsedSpace: cmsUInt32Number,
    pub ReportedSize: cmsUInt32Number,
    pub PhysicalFile: [::std::os::raw::c_char; 256usize],
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            iohandler: *mut _cms_io_handler,
            Buffer: *mut ::std::os::raw::c_void,
            size: cmsUInt32Number,
            count: cmsUInt32Number,
        ) -> cmsUInt32Number,
    >,
    pub Seek: ::std::option::Option<
        unsafe extern "C" fn(iohandler: *mut _cms_io_handler, offset: cmsUInt32Number) -> cmsBool,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(iohandler: *mut _cms_io_handler) -> cmsBool>,
    pub Tell: ::std::option::Option<
        unsafe extern "C" fn(iohandler: *mut _cms_io_handler) -> cmsUInt32Number,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            iohandler: *mut _cms_io_handler,
            size: cmsUInt32Number,
            Buffer: *const ::std::os::raw::c_void,
        ) -> cmsBool,
    >,
}
#[test]
fn bindgen_test_layout__cms_io_handler() {
    assert_eq!(
        ::std::mem::size_of::<_cms_io_handler>(),
        320usize,
        concat!("Size of: ", stringify!(_cms_io_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<_cms_io_handler>(),
        8usize,
        concat!("Alignment of ", stringify!(_cms_io_handler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).ContextID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(ContextID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).UsedSpace as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(UsedSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).ReportedSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(ReportedSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).PhysicalFile as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(PhysicalFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).Read as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(Read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).Seek as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(Seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).Close as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(Close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).Tell as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(Tell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_io_handler>())).Write as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_io_handler),
            "::",
            stringify!(Write)
        )
    );
}
pub type _cmsFreeUserDataFn = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext, Data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmsPluginBaseStruct {
    pub Magic: cmsUInt32Number,
    pub ExpectedVersion: cmsUInt32Number,
    pub Type: cmsUInt32Number,
    pub Next: *mut _cmsPluginBaseStruct,
}
#[test]
fn bindgen_test_layout__cmsPluginBaseStruct() {
    assert_eq!(
        ::std::mem::size_of::<_cmsPluginBaseStruct>(),
        24usize,
        concat!("Size of: ", stringify!(_cmsPluginBaseStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<_cmsPluginBaseStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(_cmsPluginBaseStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsPluginBaseStruct>())).Magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsPluginBaseStruct),
            "::",
            stringify!(Magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cmsPluginBaseStruct>())).ExpectedVersion as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsPluginBaseStruct),
            "::",
            stringify!(ExpectedVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsPluginBaseStruct>())).Type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsPluginBaseStruct),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cmsPluginBaseStruct>())).Next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cmsPluginBaseStruct),
            "::",
            stringify!(Next)
        )
    );
}
pub type cmsPluginBase = _cmsPluginBaseStruct;
pub type _cmsMallocFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        size: cmsUInt32Number,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type _cmsFreeFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext, Ptr: *mut ::std::os::raw::c_void),
>;
pub type _cmsReallocFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        Ptr: *mut ::std::os::raw::c_void,
        NewSize: cmsUInt32Number,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type _cmsMalloZerocFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        size: cmsUInt32Number,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type _cmsCallocFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        num: cmsUInt32Number,
        size: cmsUInt32Number,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type _cmsDupFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        Org: *const ::std::os::raw::c_void,
        size: cmsUInt32Number,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginMemHandler {
    pub base: cmsPluginBase,
    pub MallocPtr: _cmsMallocFnPtrType,
    pub FreePtr: _cmsFreeFnPtrType,
    pub ReallocPtr: _cmsReallocFnPtrType,
    pub MallocZeroPtr: _cmsMalloZerocFnPtrType,
    pub CallocPtr: _cmsCallocFnPtrType,
    pub DupPtr: _cmsDupFnPtrType,
}
#[test]
fn bindgen_test_layout_cmsPluginMemHandler() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginMemHandler>(),
        72usize,
        concat!("Size of: ", stringify!(cmsPluginMemHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginMemHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginMemHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).MallocPtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(MallocPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).FreePtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(FreePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).ReallocPtr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(ReallocPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginMemHandler>())).MallocZeroPtr as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(MallocZeroPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).CallocPtr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(CallocPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMemHandler>())).DupPtr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMemHandler),
            "::",
            stringify!(DupPtr)
        )
    );
}
pub type _cmsInterpFn16 = ::std::option::Option<
    unsafe extern "C" fn(
        Input: *const cmsUInt16Number,
        Output: *mut cmsUInt16Number,
        p: *const _cms_interp_struc,
    ),
>;
pub type _cmsInterpFnFloat = ::std::option::Option<
    unsafe extern "C" fn(
        Input: *const cmsFloat32Number,
        Output: *mut cmsFloat32Number,
        p: *const _cms_interp_struc,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cmsInterpFunction {
    pub Lerp16: _cmsInterpFn16,
    pub LerpFloat: _cmsInterpFnFloat,
}
#[test]
fn bindgen_test_layout_cmsInterpFunction() {
    assert_eq!(
        ::std::mem::size_of::<cmsInterpFunction>(),
        8usize,
        concat!("Size of: ", stringify!(cmsInterpFunction))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsInterpFunction>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsInterpFunction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsInterpFunction>())).Lerp16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsInterpFunction),
            "::",
            stringify!(Lerp16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsInterpFunction>())).LerpFloat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsInterpFunction),
            "::",
            stringify!(LerpFloat)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cms_interp_struc {
    pub ContextID: cmsContext,
    pub dwFlags: cmsUInt32Number,
    pub nInputs: cmsUInt32Number,
    pub nOutputs: cmsUInt32Number,
    pub nSamples: [cmsUInt32Number; 15usize],
    pub Domain: [cmsUInt32Number; 15usize],
    pub opta: [cmsUInt32Number; 15usize],
    pub Table: *const ::std::os::raw::c_void,
    pub Interpolation: cmsInterpFunction,
}
#[test]
fn bindgen_test_layout__cms_interp_struc() {
    assert_eq!(
        ::std::mem::size_of::<_cms_interp_struc>(),
        216usize,
        concat!("Size of: ", stringify!(_cms_interp_struc))
    );
    assert_eq!(
        ::std::mem::align_of::<_cms_interp_struc>(),
        8usize,
        concat!("Alignment of ", stringify!(_cms_interp_struc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).ContextID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(ContextID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).dwFlags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).nInputs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(nInputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).nOutputs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(nOutputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).nSamples as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(nSamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).Domain as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(Domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).opta as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(opta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).Table as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(Table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_interp_struc>())).Interpolation as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_interp_struc),
            "::",
            stringify!(Interpolation)
        )
    );
}
pub type cmsInterpParams = _cms_interp_struc;
pub type cmsInterpFnFactory = ::std::option::Option<
    unsafe extern "C" fn(
        nInputChannels: cmsUInt32Number,
        nOutputChannels: cmsUInt32Number,
        dwFlags: cmsUInt32Number,
    ) -> cmsInterpFunction,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginInterpolation {
    pub base: cmsPluginBase,
    pub InterpolatorsFactory: cmsInterpFnFactory,
}
#[test]
fn bindgen_test_layout_cmsPluginInterpolation() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginInterpolation>(),
        32usize,
        concat!("Size of: ", stringify!(cmsPluginInterpolation))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginInterpolation>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginInterpolation))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginInterpolation>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginInterpolation),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginInterpolation>())).InterpolatorsFactory as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginInterpolation),
            "::",
            stringify!(InterpolatorsFactory)
        )
    );
}
pub type cmsParametricCurveEvaluator = ::std::option::Option<
    unsafe extern "C" fn(
        Type: cmsInt32Number,
        Params: *const cmsFloat64Number,
        R: cmsFloat64Number,
    ) -> cmsFloat64Number,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginParametricCurves {
    pub base: cmsPluginBase,
    pub nFunctions: cmsUInt32Number,
    pub FunctionTypes: [cmsUInt32Number; 20usize],
    pub ParameterCount: [cmsUInt32Number; 20usize],
    pub Evaluator: cmsParametricCurveEvaluator,
}
#[test]
fn bindgen_test_layout_cmsPluginParametricCurves() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginParametricCurves>(),
        200usize,
        concat!("Size of: ", stringify!(cmsPluginParametricCurves))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginParametricCurves>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginParametricCurves))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginParametricCurves>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginParametricCurves),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginParametricCurves>())).nFunctions as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginParametricCurves),
            "::",
            stringify!(nFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginParametricCurves>())).FunctionTypes as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginParametricCurves),
            "::",
            stringify!(FunctionTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginParametricCurves>())).ParameterCount as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginParametricCurves),
            "::",
            stringify!(ParameterCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginParametricCurves>())).Evaluator as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginParametricCurves),
            "::",
            stringify!(Evaluator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cmstransform_struct {
    _unused: [u8; 0],
}
pub type cmsFormatter16 = ::std::option::Option<
    unsafe extern "C" fn(
        CMMcargo: *mut _cmstransform_struct,
        Values: *mut cmsUInt16Number,
        Buffer: *mut cmsUInt8Number,
        Stride: cmsUInt32Number,
    ) -> *mut cmsUInt8Number,
>;
pub type cmsFormatterFloat = ::std::option::Option<
    unsafe extern "C" fn(
        CMMcargo: *mut _cmstransform_struct,
        Values: *mut cmsFloat32Number,
        Buffer: *mut cmsUInt8Number,
        Stride: cmsUInt32Number,
    ) -> *mut cmsUInt8Number,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cmsFormatter {
    pub Fmt16: cmsFormatter16,
    pub FmtFloat: cmsFormatterFloat,
}
#[test]
fn bindgen_test_layout_cmsFormatter() {
    assert_eq!(
        ::std::mem::size_of::<cmsFormatter>(),
        8usize,
        concat!("Size of: ", stringify!(cmsFormatter))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsFormatter>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsFormatter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsFormatter>())).Fmt16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsFormatter),
            "::",
            stringify!(Fmt16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsFormatter>())).FmtFloat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsFormatter),
            "::",
            stringify!(FmtFloat)
        )
    );
}
pub const cmsFormatterDirection_cmsFormatterInput: cmsFormatterDirection = 0;
pub const cmsFormatterDirection_cmsFormatterOutput: cmsFormatterDirection = 1;
pub type cmsFormatterDirection = ::std::os::raw::c_uint;
pub type cmsFormatterFactory = ::std::option::Option<
    unsafe extern "C" fn(
        Type: cmsUInt32Number,
        Dir: cmsFormatterDirection,
        dwFlags: cmsUInt32Number,
    ) -> cmsFormatter,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginFormatters {
    pub base: cmsPluginBase,
    pub FormattersFactory: cmsFormatterFactory,
}
#[test]
fn bindgen_test_layout_cmsPluginFormatters() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginFormatters>(),
        32usize,
        concat!("Size of: ", stringify!(cmsPluginFormatters))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginFormatters>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginFormatters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginFormatters>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginFormatters),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginFormatters>())).FormattersFactory as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginFormatters),
            "::",
            stringify!(FormattersFactory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cms_typehandler_struct {
    pub Signature: cmsTagTypeSignature,
    pub ReadPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cms_typehandler_struct,
            io: *mut cmsIOHANDLER,
            nItems: *mut cmsUInt32Number,
            SizeOfTag: cmsUInt32Number,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub WritePtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cms_typehandler_struct,
            io: *mut cmsIOHANDLER,
            Ptr: *mut ::std::os::raw::c_void,
            nItems: cmsUInt32Number,
        ) -> cmsBool,
    >,
    pub DupPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cms_typehandler_struct,
            Ptr: *const ::std::os::raw::c_void,
            n: cmsUInt32Number,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub FreePtr: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cms_typehandler_struct, Ptr: *mut ::std::os::raw::c_void),
    >,
    pub ContextID: cmsContext,
    pub ICCVersion: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout__cms_typehandler_struct() {
    assert_eq!(
        ::std::mem::size_of::<_cms_typehandler_struct>(),
        56usize,
        concat!("Size of: ", stringify!(_cms_typehandler_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_cms_typehandler_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_cms_typehandler_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cms_typehandler_struct>())).Signature as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(Signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_typehandler_struct>())).ReadPtr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(ReadPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cms_typehandler_struct>())).WritePtr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(WritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_typehandler_struct>())).DupPtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(DupPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_cms_typehandler_struct>())).FreePtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(FreePtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cms_typehandler_struct>())).ContextID as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(ContextID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_cms_typehandler_struct>())).ICCVersion as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cms_typehandler_struct),
            "::",
            stringify!(ICCVersion)
        )
    );
}
pub type cmsTagTypeHandler = _cms_typehandler_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginTagType {
    pub base: cmsPluginBase,
    pub Handler: cmsTagTypeHandler,
}
#[test]
fn bindgen_test_layout_cmsPluginTagType() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginTagType>(),
        80usize,
        concat!("Size of: ", stringify!(cmsPluginTagType))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginTagType>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginTagType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTagType>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTagType),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTagType>())).Handler as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTagType),
            "::",
            stringify!(Handler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsTagDescriptor {
    pub ElemCount: cmsUInt32Number,
    pub nSupportedTypes: cmsUInt32Number,
    pub SupportedTypes: [cmsTagTypeSignature; 20usize],
    pub DecideType: ::std::option::Option<
        unsafe extern "C" fn(
            ICCVersion: cmsFloat64Number,
            Data: *const ::std::os::raw::c_void,
        ) -> cmsTagTypeSignature,
    >,
}
#[test]
fn bindgen_test_layout_cmsTagDescriptor() {
    assert_eq!(
        ::std::mem::size_of::<cmsTagDescriptor>(),
        96usize,
        concat!("Size of: ", stringify!(cmsTagDescriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsTagDescriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsTagDescriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagDescriptor>())).ElemCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagDescriptor),
            "::",
            stringify!(ElemCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsTagDescriptor>())).nSupportedTypes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagDescriptor),
            "::",
            stringify!(nSupportedTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagDescriptor>())).SupportedTypes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagDescriptor),
            "::",
            stringify!(SupportedTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsTagDescriptor>())).DecideType as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsTagDescriptor),
            "::",
            stringify!(DecideType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginTag {
    pub base: cmsPluginBase,
    pub Signature: cmsTagSignature,
    pub Descriptor: cmsTagDescriptor,
}
#[test]
fn bindgen_test_layout_cmsPluginTag() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginTag>(),
        128usize,
        concat!("Size of: ", stringify!(cmsPluginTag))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginTag>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginTag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTag>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTag),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTag>())).Signature as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTag),
            "::",
            stringify!(Signature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTag>())).Descriptor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTag),
            "::",
            stringify!(Descriptor)
        )
    );
}
pub type cmsIntentFn = ::std::option::Option<
    unsafe extern "C" fn(
        ContextID: cmsContext,
        nProfiles: cmsUInt32Number,
        Intents: *mut cmsUInt32Number,
        hProfiles: *mut cmsHPROFILE,
        BPC: *mut cmsBool,
        AdaptationStates: *mut cmsFloat64Number,
        dwFlags: cmsUInt32Number,
    ) -> *mut cmsPipeline,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginRenderingIntent {
    pub base: cmsPluginBase,
    pub Intent: cmsUInt32Number,
    pub Link: cmsIntentFn,
    pub Description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_cmsPluginRenderingIntent() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginRenderingIntent>(),
        296usize,
        concat!("Size of: ", stringify!(cmsPluginRenderingIntent))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginRenderingIntent>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginRenderingIntent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginRenderingIntent>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginRenderingIntent),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginRenderingIntent>())).Intent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginRenderingIntent),
            "::",
            stringify!(Intent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginRenderingIntent>())).Link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginRenderingIntent),
            "::",
            stringify!(Link)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginRenderingIntent>())).Description as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginRenderingIntent),
            "::",
            stringify!(Description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginMultiProcessElement {
    pub base: cmsPluginBase,
    pub Handler: cmsTagTypeHandler,
}
#[test]
fn bindgen_test_layout_cmsPluginMultiProcessElement() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginMultiProcessElement>(),
        80usize,
        concat!("Size of: ", stringify!(cmsPluginMultiProcessElement))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginMultiProcessElement>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginMultiProcessElement))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginMultiProcessElement>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMultiProcessElement),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginMultiProcessElement>())).Handler as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMultiProcessElement),
            "::",
            stringify!(Handler)
        )
    );
}
pub type _cmsOPToptimizeFn = ::std::option::Option<
    unsafe extern "C" fn(
        Lut: *mut *mut cmsPipeline,
        Intent: cmsUInt32Number,
        InputFormat: *mut cmsUInt32Number,
        OutputFormat: *mut cmsUInt32Number,
        dwFlags: *mut cmsUInt32Number,
    ) -> cmsBool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginOptimization {
    pub base: cmsPluginBase,
    pub OptimizePtr: _cmsOPToptimizeFn,
}
#[test]
fn bindgen_test_layout_cmsPluginOptimization() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginOptimization>(),
        32usize,
        concat!("Size of: ", stringify!(cmsPluginOptimization))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginOptimization>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginOptimization))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginOptimization>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginOptimization),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginOptimization>())).OptimizePtr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginOptimization),
            "::",
            stringify!(OptimizePtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsStride {
    pub BytesPerLineIn: cmsUInt32Number,
    pub BytesPerLineOut: cmsUInt32Number,
    pub BytesPerPlaneIn: cmsUInt32Number,
    pub BytesPerPlaneOut: cmsUInt32Number,
}
#[test]
fn bindgen_test_layout_cmsStride() {
    assert_eq!(
        ::std::mem::size_of::<cmsStride>(),
        16usize,
        concat!("Size of: ", stringify!(cmsStride))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsStride>(),
        4usize,
        concat!("Alignment of ", stringify!(cmsStride))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsStride>())).BytesPerLineIn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsStride),
            "::",
            stringify!(BytesPerLineIn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsStride>())).BytesPerLineOut as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsStride),
            "::",
            stringify!(BytesPerLineOut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsStride>())).BytesPerPlaneIn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsStride),
            "::",
            stringify!(BytesPerPlaneIn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsStride>())).BytesPerPlaneOut as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsStride),
            "::",
            stringify!(BytesPerPlaneOut)
        )
    );
}
pub type _cmsTransformFn = ::std::option::Option<
    unsafe extern "C" fn(
        CMMcargo: *mut _cmstransform_struct,
        InputBuffer: *const ::std::os::raw::c_void,
        OutputBuffer: *mut ::std::os::raw::c_void,
        Size: cmsUInt32Number,
        Stride: cmsUInt32Number,
    ),
>;
pub type _cmsTransform2Fn = ::std::option::Option<
    unsafe extern "C" fn(
        CMMcargo: *mut _cmstransform_struct,
        InputBuffer: *const ::std::os::raw::c_void,
        OutputBuffer: *mut ::std::os::raw::c_void,
        PixelsPerLine: cmsUInt32Number,
        LineCount: cmsUInt32Number,
        Stride: *const cmsStride,
    ),
>;
pub type _cmsTransformFactory = ::std::option::Option<
    unsafe extern "C" fn(
        xform: *mut _cmsTransformFn,
        UserData: *mut *mut ::std::os::raw::c_void,
        FreePrivateDataFn: *mut _cmsFreeUserDataFn,
        Lut: *mut *mut cmsPipeline,
        InputFormat: *mut cmsUInt32Number,
        OutputFormat: *mut cmsUInt32Number,
        dwFlags: *mut cmsUInt32Number,
    ) -> cmsBool,
>;
pub type _cmsTransform2Factory = ::std::option::Option<
    unsafe extern "C" fn(
        xform: *mut _cmsTransform2Fn,
        UserData: *mut *mut ::std::os::raw::c_void,
        FreePrivateDataFn: *mut _cmsFreeUserDataFn,
        Lut: *mut *mut cmsPipeline,
        InputFormat: *mut cmsUInt32Number,
        OutputFormat: *mut cmsUInt32Number,
        dwFlags: *mut cmsUInt32Number,
    ) -> cmsBool,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmsPluginTransform {
    pub base: cmsPluginBase,
    pub factories: cmsPluginTransform__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cmsPluginTransform__bindgen_ty_1 {
    pub legacy_xform: _cmsTransformFactory,
    pub xform: _cmsTransform2Factory,
}
#[test]
fn bindgen_test_layout_cmsPluginTransform__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginTransform__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cmsPluginTransform__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginTransform__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cmsPluginTransform__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginTransform__bindgen_ty_1>())).legacy_xform as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTransform__bindgen_ty_1),
            "::",
            stringify!(legacy_xform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsPluginTransform__bindgen_ty_1>())).xform as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTransform__bindgen_ty_1),
            "::",
            stringify!(xform)
        )
    );
}
#[test]
fn bindgen_test_layout_cmsPluginTransform() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginTransform>(),
        32usize,
        concat!("Size of: ", stringify!(cmsPluginTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginTransform))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTransform>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTransform),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginTransform>())).factories as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginTransform),
            "::",
            stringify!(factories)
        )
    );
}
pub type _cmsCreateMutexFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext) -> *mut ::std::os::raw::c_void,
>;
pub type _cmsDestroyMutexFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext, mtx: *mut ::std::os::raw::c_void),
>;
pub type _cmsLockMutexFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext, mtx: *mut ::std::os::raw::c_void) -> cmsBool,
>;
pub type _cmsUnlockMutexFnPtrType = ::std::option::Option<
    unsafe extern "C" fn(ContextID: cmsContext, mtx: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsPluginMutex {
    pub base: cmsPluginBase,
    pub CreateMutexPtr: _cmsCreateMutexFnPtrType,
    pub DestroyMutexPtr: _cmsDestroyMutexFnPtrType,
    pub LockMutexPtr: _cmsLockMutexFnPtrType,
    pub UnlockMutexPtr: _cmsUnlockMutexFnPtrType,
}
#[test]
fn bindgen_test_layout_cmsPluginMutex() {
    assert_eq!(
        ::std::mem::size_of::<cmsPluginMutex>(),
        56usize,
        concat!("Size of: ", stringify!(cmsPluginMutex))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsPluginMutex>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsPluginMutex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMutex>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMutex),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMutex>())).CreateMutexPtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMutex),
            "::",
            stringify!(CreateMutexPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMutex>())).DestroyMutexPtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMutex),
            "::",
            stringify!(DestroyMutexPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMutex>())).LockMutexPtr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMutex),
            "::",
            stringify!(LockMutexPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsPluginMutex>())).UnlockMutexPtr as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsPluginMutex),
            "::",
            stringify!(UnlockMutexPtr)
        )
    );
}
